{"0": {
    "doc": "App to App test links",
    "title": "Requested data",
    "content": "Please note all the requests below ask for the following claims (all from ‘scope’ values): &lt;ul&gt; &lt;li&gt;profile&lt;/li&gt; &lt;li&gt;eid&lt;/li&gt; &lt;li&gt;email&lt;/li&gt; &lt;li&gt;address&lt;/li&gt; &lt;/ul&gt; . Please note also the Confirm links are only valid for a limited amount of time. After a while, the request object on which they are based are wiped in the hosting server. To re-create new ones, please consult How to create A2A confirm links (hosted on BMID Confluence). ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#requested-data",
    "relUrl": "/TestLinks/#requested-data"
  },"1": {
    "doc": "App to App test links",
    "title": "Links",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#links",
    "relUrl": "/TestLinks/#links"
  },"2": {
    "doc": "App to App test links",
    "title": "UAT",
    "content": "Login . UAT - OIDC V1 login . UAT - OIDC V2 login . Confirm links . UAT - OIDC V1 confirm . UAT - OIDC V2 confirm . Azure B2C ClientSecret . UAT - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#uat",
    "relUrl": "/TestLinks/#uat"
  },"3": {
    "doc": "App to App test links",
    "title": "E2E",
    "content": "Login . E2E - OIDC V1 login . E2E - OIDC V2 login . Confirm . E2E - OIDC V1 confirm . E2E - OIDC V2 confirm . Azure B2C ClientSecret . E2E - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#e2e",
    "relUrl": "/TestLinks/#e2e"
  },"4": {
    "doc": "App to App test links",
    "title": "PRD",
    "content": "Login . PRD - OIDC V1 login . PRD - OIDC V2 login . Confirm . PRD - OIDC V1 Confirm . PRD - OIDC V2 Confirm . Azure B2C ClientSecret . PRD - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#prd",
    "relUrl": "/TestLinks/#prd"
  },"5": {
    "doc": "App to App test links",
    "title": "App to App test links",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/",
    "relUrl": "/TestLinks/"
  },"6": {
    "doc": "Authentication API",
    "title": "Overview",
    "content": "This API is based on the Authorization Code Flow of OpenID Connect 1.0. It allows you to verify the identity of an end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user. The diagram below describes the Authentication process and how your systems will be interacting with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Authentication event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#overview",
    "relUrl": "/authentication/#overview"
  },"7": {
    "doc": "Authentication API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#guides",
    "relUrl": "/authentication/#guides"
  },"8": {
    "doc": "Authentication API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the browser will redirect the User to our Front-End. itsme® then take care of authenticating him. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#generate-itsme-button",
    "relUrl": "/authentication/#generate-itsme-button"
  },"9": {
    "doc": "Authentication API",
    "title": "Client Authentication methods",
    "content": "itsme® supports the following authentication methods to protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party : . | asymmetric RSA key pair | symmetric shared secret | . itsme® recommend using the asymmetric RSA key pair method and allow you to rotate your keys without the need to sync with us. Asymmetric RSA . This method requires that each party exposes its public keys as a simple JWK Set document on a URI publicly accessible, and keep its private keys for itself. For itsme®, this URI can be retrieved from the itsme® Discovery document, using the “jwks_uri” key. Your private and public keys can be generated using your own tool or via Yeoman. If using Yeoman, you need to install generator-itsme with NPM: . $ npm install -g yo generator-itsme . After installation, run the generator: . $ yo itsme . The Yeoman tool will generate two files, the jwks_private.json which MUST be stored securely in your system, and the jwks_public.json which needs to be exposed as a JWK Set on a URI publicly accessible and have the HTTPS scheme. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme.be and itsme® will make sure to complete the configuration for you in no time! Symmetric secret . This method requires the exchange of a static secret that will be used to authenticate with our Back-End. The client_secret value will be provided by itsme® when registering your project. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#client-authentication-methods",
    "relUrl": "/authentication/#client-authentication-methods"
  },"10": {
    "doc": "Authentication API",
    "title": "Certificates and website security",
    "content": "itsme® requires HTTPS connections to guarantee security. This means the itsme API can only be accessed through the secure https protocol. All of the API URL we publish use HTTPS. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#certificates-and-website-security",
    "relUrl": "/authentication/#certificates-and-website-security"
  },"11": {
    "doc": "Authentication API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the \"application/x-www-form-urlencoded\" format, or | response displayed directly on our itsme® sign-in page ; | response using the \"application/json\" media type | . This is a standard for data communication that’s easy to read for humans as well as machines. Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response. Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. Concretely, . Authorization Request - if the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page (possible values are listed in the table below). If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the “application/x-www-form-urlencoded” format : . | errorREQUIRED | A single ASCII error code. | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example, the Authorization Endpoint redirects the User by sending the following HTTP response: . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Request - if the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the “application/json” media type : . | errorREQUIRED | A single ASCII error code. | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Request - When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. For example: . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Possible error codes and corresponding error description . Authorization Endpoint errors . | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Authentication Request cannot be completed without displaying a user interface for User authentication. | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . Token Endpoint errors . | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . UserInfo Endpoint errors . | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#handling-responses",
    "relUrl": "/authentication/#handling-responses"
  },"12": {
    "doc": "Authentication API",
    "title": "Mapping the user",
    "content": "To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. The sub claim value must be mapped to the corresponding user in your application Server. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. All these flows are depicted in the itsme® B2B portal. In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#mapping-the-user",
    "relUrl": "/authentication/#mapping-the-user"
  },"13": {
    "doc": "Authentication API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#api-reference",
    "relUrl": "/authentication/#api-reference"
  },"14": {
    "doc": "Authentication API",
    "title": "itsme® Discovery Document",
    "content": ". | RSA keys | Symmetric keys | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#itsme-discovery-document",
    "relUrl": "/authentication/#itsme-discovery-document"
  },"15": {
    "doc": "Authentication API",
    "title": "Authorization Request",
    "content": ". | RSA keys | Symmetric key | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender and birthdate. | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user. | . | addressOPTIONAL | Returns the information about the user's postal address. The value of the address member is a JSON structure containing some or all of these members formatted street_address postal_code locality country | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value preregistered during the registration and use the HTTPS scheme. http://localhost is only permitted for development purposes, it’s not for use in production.Note : if relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. | . | login_hintOPTIONAL | If your application knows which user is trying to authenticate, it can use this parameter to pre-fill the phone number of the user on the itsme® sign-in page, e.g. 32+123456789 with 32 the country code and 123456789 the user's phone number. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : If these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint and/or in the ID Token. It is represented as a JSON object that has two members - {\"userinfo\":{...} and {\"id_token\":{...}, which content indicates which claims to return at the UserInfo Endpoint and which at the ID Token, together with indication whether the claim is voluntary (default) or essential.Possible user's details your application can request is listed below. | nameOPTIONAL | User's full name in displayable form including all name parts, possibly including titles and suffixes | . | given_nameOPTIONAL | Given name(s) or first name(s) of the user. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters. | . | family_nameOPTIONAL | Surname(s) or last name(s) of the user. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters. | . | birtdateOPTIONAL | User's birthday, represented as a YYYY-MM-DD format. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | User's birthday, represented as a string. | . | genderOPTIONAL | User's gender. Possible values are : female male | . | emailOPTIONAL | User's email address. | . | email_verifiedOPTIONAL | true if the user's e-mail address is verified; otherwise false. | . | phone_numberOPTIONAL | User's phone number, in E.164 format. | . | phone_number_verifiedOPTIONAL | true if the user's e-phone number is verified; otherwise false. | . | addressOPTIONAL | Returns the information about the user's postal address. The value of the address is a JSON structure containing some or all of these members formatted street_address postal_code locality country. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | The jurisdiction that has conferred citizenship rights to the user, in ISO 3166 format. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | The location where the user was born. The value of this attribute is a JSON structure containing some or all of these members formatted city country. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | XXX | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns the Belgian ID card number, 12 digits in the form xxx-xxxxxxx-yy. The check-number yy is the remainder of the division of xxxxxxxxxx by 97. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns information about the user's phone. The value of this attribute is a JSON structure containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction. The value of this attribute is a JSON structure containing some or all of these members securityLevel bindLevel appRelease. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns the unique identification number of natural persons who are registered in Belgium. This number consists of 11 digits of the form yy.mm.dd-xxx.cd where yy.mm.dd is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. | . | http://itsme.services/v2/claim/claim_nl_bsnOPTIONAL | Returns the citizen service number, a unique registration number for everyone who lives in the Netherlands. This number consists of 8 to 9 digits. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the authentication request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If used, the JWT MUST be signed then encrypted, with the result being a Nested JWT. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the authentication request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If used, the JWT MUST be signed then encrypted, with the result being a Nested JWT. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . Error reponses . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization server informs you about the error and will not automatically redirect the User to the invalid redirection URI. If the User denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs you by adding the following parameters to the query component of the redirection URI using the “application/x-www-form-urlencoded” format . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes is openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims : profile email address phone | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender and birthdate. | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user. | . | addressOPTIONAL | Returns the information about the user's postal address. The value of the address member is a JSON structure containing some or all of these members formatted street_address postal_code locality country | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value preregistered during the registration and use the HTTPS scheme. http://localhost is only permitted for development purposes, it’s not for use in production.Note : if relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint and/or in the ID Token. It is represented as a JSON object that has two members - {\"userinfo\":{...} and {\"id_token\":{...}, which content indicates which claims to return at the UserInfo Endpoint and which with the ID Token, together with indication whether the claim is voluntary (default) or essential.Possible user's details your application can request is listed below. | nameOPTIONAL | User's full name in displayable form including all name parts, possibly including titles and suffixes | . | given_nameOPTIONAL | Given name(s) or first name(s) of the user. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters. | . | family_nameOPTIONAL | Surname(s) or last name(s) of the user. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters. | . | birtdateOPTIONAL | User's birthday, represented as a YYYY-MM-DD format. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | User's birthday, represented as a string. | . | genderOPTIONAL | User's gender. Possible values are : F M | . | emailOPTIONAL | User's email address. | . | email_verifiedOPTIONAL | true if the user's e-mail address is verified; otherwise false. | . | phone_numberOPTIONAL | User's phone number, in E.164 format. | . | phone_number_verifiedOPTIONAL | true if the user's e-phone number is verified; otherwise false. | . | addressOPTIONAL | Returns the information about the user's postal address. The value of the address is a JSON structure containing some or all of these members formatted street_address postal_code locality country. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | The jurisdiction that has conferred citizenship rights to the user, in ISO 3166 format. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | The location where the user was born. The value of this attribute is a JSON structure containing some or all of these members formatted city country. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | XXX | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns the Belgian ID card number, 12 digits in the form xxx-xxxxxxx-yy. The check-number yy is the remainder of the division of xxxxxxxxxx by 97. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns information about the user's phone. The value of this attribute is a JSON structure containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer hasSimEnabled deviceLockLevel smsEnabled rooted imei deviceModel sdkRelease. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction. The value of this attribute is a JSON structure containing some or all of these members securityLevel bindLevel appRelease. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns an unique identification number of natural persons who are registered in Belgium. This number consists of 11 digits of the form yy.mm.dd-xxx.cd where yy.mm.dd is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. | . | http://itsme.services/v2/claim/claim_nl_bsnOPTIONAL | Returns the citizen service number, a unique registration number for everyone who lives in the Netherlands. This number consists of 8 to 9 digits. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the authentication request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If used, the JWT MUST be signed. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | RSA keys | Symmetric key | . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#authorization-request",
    "relUrl": "/authentication/#authorization-request"
  },"16": {
    "doc": "Authentication API",
    "title": "Token Request",
    "content": ". | RSA keys | Symmetric key | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using RSA keys. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_assertion_typeREQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertionREQUIRED | Contains a JWT token that is signed, and then encrypted, using the client RSA keys. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code.The JWT contains the following claims. | issREQUIRED | The issuer of the token. This value must be the same as the client_id. | . | subREQUIRED | The subject of the token. This value must be the same as the client_id. | . | audOPTIONAL | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jtiOPTIONAL | An unique identifier for the token, containing maximum 255 characters. | . | expOPTIONAL | The expiration time of the token in seconds since January 1, 1970 UTC. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JSON Web Token. So, before being able to use the ID Token claim's you will have to decrypt and verify it using the RSA keys. | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously need to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using a symmetric key. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed JSON Web Token. So, before being able to use the ID Token claim's you will have to verify it using the symmetric key. | . | . Example . | RSA keys | Symmetric key | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#token-request",
    "relUrl": "/authentication/#token-request"
  },"17": {
    "doc": "Authentication API",
    "title": "UserInfo Request",
    "content": ". | RSA keys | Symmetric key | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . The UserInfo Response is a signed and encrypted JSON Web Token. So, before being able to extract the claims you will have to decrypt and verify it using the RSA keys. | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . The UserInfo Response is a signed JSON Web Token. So, before being able to extract the claims you will have to verify it using the symmetric key. | . Example . | RSA keys | Symmetric key | . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#userinfo-request",
    "relUrl": "/authentication/#userinfo-request"
  },"18": {
    "doc": "Authentication API",
    "title": "Revoke Request",
    "content": ". | RSA keys | Symmetric keys | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. ### Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. | . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . The response is very simple: it’s always an HTTP 200 if the token is revoked or unknown. | . Example . | RSA keys | Symmetric key | . | Not applicable. | Request . Response . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#revoke-request",
    "relUrl": "/authentication/#revoke-request"
  },"19": {
    "doc": "Authentication API",
    "title": "Authentication API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/authentication/",
    "relUrl": "/authentication/"
  },"20": {
    "doc": "Azure B2C",
    "title": "Welcome",
    "content": "itsme® API allows partners to use verified identities for authentication and authorization on web desktop, mobile web or mobile applications. Learn how to integrate our services with Azure Active Directory B2C. For a more detailed, in-depth explanation of each, please read through the appropriate developer docs. ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#welcome",
    "relUrl": "/azureB2C/#welcome"
  },"21": {
    "doc": "Azure B2C",
    "title": "Use cases",
    "content": "For more information on how itsme® can best work for your business, please contact us. itsme® will be happy to help ! . ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#use-cases",
    "relUrl": "/azureB2C/#use-cases"
  },"22": {
    "doc": "Azure B2C",
    "title": "Services",
    "content": "Hereby the list of itsme® services that can be implemented through Azure Active Directory B2C : . | Services | Description | . | Authentication | Enables your users/customers to log in securely to your application (on web, tablet or mobile) | . | Identification | Enables you to identify your users and access their verified data. | . ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#services",
    "relUrl": "/azureB2C/#services"
  },"23": {
    "doc": "Azure B2C",
    "title": "Getting started",
    "content": "In order to start your integration you will first need to setup your personal Sanbox environment. To do so, you will be requested to provide the following information : . | Contact details such as your email, name, phone number. | Organisation details as shown on the company register for your jurisdiction. | Information about the project you want to setup (the services you want to use, the client authentication method you want to set-up, the user attributes you want to request, ...) | . Our onboarding team will review your project and get in touch with you in no time to provide your credentials : . | a \"client_id\" | a \"service_code\" | an email to a one-time link to the \"client_secret\" | the list of user attributes you can request | . Request your Sandbox . On top of this, you will also need to have an Azure Active Directory subscription. For more information, please visit the Microsoft partner documentation : https://docs.microsoft.com/en-us/azure/active-directory-b2c/partner-itsme. ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#getting-started",
    "relUrl": "/azureB2C/#getting-started"
  },"24": {
    "doc": "Azure B2C",
    "title": "Azure B2C",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/",
    "relUrl": "/azureB2C/"
  },"25": {
    "doc": "Confirmation API",
    "title": "Confirmation API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/",
    "relUrl": "/confirmation/"
  },"26": {
    "doc": "Direct Integration",
    "title": "Welcome",
    "content": "itsme® API allows partners to use verified identities for authentication and authorization on web desktop, mobile web or mobile applications. Learn how to integrate our services that you and your business will benefit from. For a more detailed, in-depth explanation of each, please read through the appropriate developer docs. ",
    "url": "https://belgianmobileid.github.io/doc/directIntegration/#welcome",
    "relUrl": "/directIntegration/#welcome"
  },"27": {
    "doc": "Direct Integration",
    "title": "Use cases",
    "content": "For more information on how itsme® can best work for your business, please contact us. itsme® will be happy to help ! . ",
    "url": "https://belgianmobileid.github.io/doc/directIntegration/#use-cases",
    "relUrl": "/directIntegration/#use-cases"
  },"28": {
    "doc": "Direct Integration",
    "title": "Services",
    "content": "Head over to our developer documentation for each of our services. Here you will find: . | A techical overview | Step by step instructions on how to integrate | Code snippets | . | Services | Description | . | Authentication | Enables your users/customers to log in securely to your application (on web, tablet or mobile) | . | Identification | Enables you to identify your users and access their verified data. | . | Confirmation | Enables your users/customers to give their consent to a payment or order/action. | . | Signing | Enables your users/customers to sign documents electronically. The itsme® Sign responds to the requirements for the creation of Qualified Electronic Signature (QES). | . ",
    "url": "https://belgianmobileid.github.io/doc/directIntegration/#services",
    "relUrl": "/directIntegration/#services"
  },"29": {
    "doc": "Direct Integration",
    "title": "Getting started",
    "content": "In order to start your integration you will first need to setup your personal Sanbox environment. To do so, you will be requested to provide the following information : . | Contact details such as your email, name, phone number. | Organisation details as shown on the company register for your jurisdiction. | Information about the project you want to setup (the services you want to use, the client authentication method you want to set-up, the user attributes you want to request, ...) | . Our onboarding team will review your project and get in touch with you in no time to provide your credentials : . | a \"client_id\" | a \"service_code\" | information about your client authentication method | the list of user attributes you can request | . Request your Sandbox . ",
    "url": "https://belgianmobileid.github.io/doc/directIntegration/#getting-started",
    "relUrl": "/directIntegration/#getting-started"
  },"30": {
    "doc": "Direct Integration",
    "title": "Direct Integration",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/directIntegration/",
    "relUrl": "/directIntegration/"
  },"31": {
    "doc": "Identification API",
    "title": "Identification API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/identification/",
    "relUrl": "/identification/"
  },"32": {
    "doc": "Welcome",
    "title": "Welcome",
    "content": "itsme® API allows partners to use verified identities for authentication and authorization on web desktop, mobile web or mobile applications. ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"33": {
    "doc": "Welcome",
    "title": "Services",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/index#services",
    "relUrl": "/index#services"
  },"34": {
    "doc": "Welcome",
    "title": "Authentication",
    "content": "This Service enables your users/customers to log in securely to your application (on web, tablet or mobile). Direct integration with itsme&reg; Integration through Azure B2C ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"35": {
    "doc": "Welcome",
    "title": "Identification",
    "content": "This Service enables you to identify your users and access their verified data. Direct integration with itsme&reg; Integration through Azure B2C ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"36": {
    "doc": "Welcome",
    "title": "Confirmation",
    "content": "This Service enables your users/customers to give their consent to a payment or order/action. Direct integration with itsme&reg; ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"37": {
    "doc": "Test",
    "title": "testing code snippet",
    "content": "// Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . $ npm install -g yo generator-itsme . &lt;code style=display:block;white-space:pre-wrap&gt;$ npm install -g yo generator-itsme&lt;/code&gt; . | Parameter | Description | . | Param1required | Global description of Param1 | subparam1optional | description of subparam1 | . | subparam2required | description of subparam2 | . | . | Param2optional | Global description of Param2 | . ",
    "url": "https://belgianmobileid.github.io/doc/test/#testing-code-snippet",
    "relUrl": "/test/#testing-code-snippet"
  },"38": {
    "doc": "Test",
    "title": "Test",
    "content": "Voilà une page de test de Jekyll . First tabs . | js | ruby | . | tagada . | tsoin tsoin here goes some code . | . Second tabs . | yaml | json | . | hello: . | ‘whatsup’ | ‘hi’ | . | { “hello”: [“whatsup”, “hi”] } . | . ",
    "url": "https://belgianmobileid.github.io/doc/test/",
    "relUrl": "/test/"
  }
}
