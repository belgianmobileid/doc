{"0": {
    "doc": "App to App test links",
    "title": "Requested data",
    "content": "The login links request all data available. The confirm links request a basic set of data (profile, eid, address, email and phone number). Please note also the Confirm links are only valid for a limited amount of time. Under some occasions, the JWKSet of the test partner is re-generated, making the request object in the links below obsolete. To re-create new ones, please consult How to create A2A confirm links (hosted on BMID Confluence). ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#requested-data",
    "relUrl": "/TestLinks/#requested-data"
  },"1": {
    "doc": "App to App test links",
    "title": "Links",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#links",
    "relUrl": "/TestLinks/#links"
  },"2": {
    "doc": "App to App test links",
    "title": "UAT",
    "content": "Login . UAT - OIDC V1 login . UAT - OIDC V2 login . Confirm links . UAT - OIDC V1 confirm . UAT - OIDC V2 confirm . Azure B2C ClientSecret . UAT - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#uat",
    "relUrl": "/TestLinks/#uat"
  },"3": {
    "doc": "App to App test links",
    "title": "E2E",
    "content": "Login . E2E - OIDC V1 login . E2E - OIDC V2 login . Confirm . E2E - OIDC V1 confirm . E2E - OIDC V2 confirm . Azure B2C ClientSecret . E2E - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#e2e",
    "relUrl": "/TestLinks/#e2e"
  },"4": {
    "doc": "App to App test links",
    "title": "PRD",
    "content": "Login . PRD - OIDC V1 login . PRD - OIDC V2 login . Confirm . PRD - OIDC V1 Confirm . PRD - OIDC V2 Confirm . Azure B2C ClientSecret . PRD - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#prd",
    "relUrl": "/TestLinks/#prd"
  },"5": {
    "doc": "App to App test links",
    "title": "App to App test links",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/",
    "relUrl": "/TestLinks/"
  },"6": {
    "doc": "Authentication API",
    "title": "Overview",
    "content": "itsme® API is based on the Authorization Code Flow of OpenID Connect 1.0. The API can be used to verify the end-users’ identity and obtain basic profile information about gien end-users. The diagram below describes the Authentication process and how your systems should integrate with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Authentication event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#overview",
    "relUrl": "/authentication/#overview"
  },"7": {
    "doc": "Authentication API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#guides",
    "relUrl": "/authentication/#guides"
  },"8": {
    "doc": "Authentication API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the user will be redirected to our Front-End. itsme® then take care of authenticating him. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#generate-itsme-button",
    "relUrl": "/authentication/#generate-itsme-button"
  },"9": {
    "doc": "Authentication API",
    "title": "Securing the exchange of information",
    "content": "To protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party, the OpenID Connect protocol uses JSON Web Token (JWT) which can be signed and/or encrypted. itsme® supports 3 cryptographic methods to perform the signing and encryption of JWTs : . | Public- and private-key key pair | secret key | secret key + Proof of Key for Code Exchange PKCE) security extension | . You will have to choose between one of these methods when registering your project. Public- and private-key method and JWKSet URI . This method uses linked public- and private-key pairs to encrypt and decrypt senders’ and recipients’ sensitive data. It is also known as public-key cryptography or public-key encryption. This method requires that each party exposes its public keys as a simple JWK Set document on a URI publicly accessible, and keep its private keys for itself. Using the jwks_uri key retrieve the URI for itsme® from the itsme® Discovery document, . Your public and private key can be generated using your own tool or via Yeoman. If using Yeoman, you need to install generator-itsme with NPM: . $ npm install -g yo generator-itsme . After installation, run the generator: . $ yo itsme . The Yeoman tool will generate two files, the jwks_private.json which MUST be stored securely in your system, and the jwks_public.json which needs to be exposed as a JWK Set on a URI publicly accessible and have the HTTPS scheme . Refer to this section for more information. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme.be and itsme® will make sure to complete the configuration for you in no time! The algorithms – needed to sign and/or encrypt a JWT or to authenticate to our Token Endpoint – are listed in the itsme® Discovery document for more information. Secret key method . Secret key cryptography method uses the same secret key to encrypt and decrypt sensitive information. This approach is the inverse of public- and private-key encryption. This method requires the exchange of a static secret to be held by both the sender and the data receiver. The secret value will be provided by itsme® when registering your project. The algorithms – needed to sign and/or encrypt a JWT or to authenticate to our Token Endpoint – are listed in the itsme® Discovery document for more information. If you choose to go with the secret key method, you will be able to specify if the ID Token JWT needs to be signed with the an asymmetric algorithm (e.g. RS256) or with a symmetric algorithm (e.g. : HS256). When using the RS256 algorithm, our public keys will be needed to verify the signature. This information can be found in our itsme® Discovery document, using the key jwks_uri. PKCE-enhanced flow . When using the secret key cryptography method, itsme® also supports an extra security extension named Proof of Key for Code Exchange (PKCE). This additionnal layer of security is intended mitigate some Authorization Code Interception Attack. It implies adding a random string, named code_verifier, to your Authorization Request and then a SHA256 hash of that string, named code_challenge, to your Token Request. First, you create a code verifier for each Authorization Request, in the following manner : . var code_verifier = 'some-random-string' Should use the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. You then create a code challenge derived from the code verifier by using one of the following transformations on the code verifier : . const crypto = require('crypto') const base64url = require('base64url') var hash = crypto.createHash('sha256').update(code_verifier).digest(); var code_challenge = base64url.encode(hash) //code_verifier MUST be hashed using S256.You are permitted to use plain only if you cannot support S256 for some technical reason. Signing, encrypting and decoding JWTs . Libraries implementing JWT and the JOSE specs JWS, JWE, JWK, and JWA are listed here. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#securing-the-exchange-of-information",
    "relUrl": "/authentication/#securing-the-exchange-of-information"
  },"10": {
    "doc": "Authentication API",
    "title": "Certificates and website security",
    "content": "itsme® requires https connections to guarantee security. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. All itsme® API URL we publish use https. All requests to our endpoints MUST also use the SNI extension (refer to the RFC for more information) of the TLS protocol, that allows our servers to provide you with the correct certificate based on which endpoint you are querying. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#certificates-and-website-security",
    "relUrl": "/authentication/#certificates-and-website-security"
  },"11": {
    "doc": "Authentication API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the application/x-www-form-urlencoded format, or | response displayed directly on our itsme® sign-in page ; | response using the application/json media type | . Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response : . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. So, OpenID Connect defines a number of rules regarding the format of errors returned from our endpoints. Authorization Endpoint errors . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page. If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the application/x-www-form-urlencoded format : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | access_denied | The User or the Authorization Endpoint denied the request. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Endpoint errors . If the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters in the entity-body of the HTTP response using the application/json media type : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Endpoint errors . When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . For example : . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Revocation Endpoint errors . If the request fails the Revoke Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the application/json media type : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | unsupported_token_type | itsme® does not support the revocation of the presented access token. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#handling-responses",
    "relUrl": "/authentication/#handling-responses"
  },"12": {
    "doc": "Authentication API",
    "title": "Mapping the user",
    "content": "Mapping using sub claim . To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. All these flows are depicted in the itsme® B2B portal. Benefit of sub claim . The benefit of using a sub claim is that it will not change, not even if other user attributes (email, phone number, etc.) associated with that account are updated. Deleting and re-creating an itsme® account . In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#mapping-the-user",
    "relUrl": "/authentication/#mapping-the-user"
  },"13": {
    "doc": "Authentication API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#api-reference",
    "relUrl": "/authentication/#api-reference"
  },"14": {
    "doc": "Authentication API",
    "title": "itsme® Discovery Document",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#itsme-discovery-document",
    "relUrl": "/authentication/#itsme-discovery-document"
  },"15": {
    "doc": "Authentication API",
    "title": "Authorization Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MUST contain the TCP port number 443. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . | code_challengeREQUIRED | A challenge derived from the code verifier by using one of the following transformations on the code verifier : plain or S256 method. | . | code_challenge_methodOPTIONAL | Code verifier transformation method.Possible values : plain or S256.It MUST be set to S256. You are permitted to use plain only if you cannot support S256 for some technical reason. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#authorization-request",
    "relUrl": "/authentication/#authorization-request"
  },"16": {
    "doc": "Authentication API",
    "title": "Token Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the public- and private-key pair method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID token and access token. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_assertion_typeREQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertionREQUIRED | Is a set of identity and security information, in the form of a JWT, used as an authentication method. To ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code, the JWT MUST be signed, and MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The JWT contains the following claims. | issREQUIRED | The issuer of the token. This value MUST be the same as the client_id. | . | subREQUIRED | The subject of the token. This value MUST be the same as the client_id. | . | audREQUIRED | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jtiREQUIRED | An unique identifier for the token, containing maximum 255 characters. | . | expREQUIRED | The expiration time of the token in seconds since January 1, 1970 UTC. | . | iatOPTIONAL | The time at which the JWT was issued. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . | code_verifierREQUIRED | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\":\"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#token-request",
    "relUrl": "/authentication/#token-request"
  },"17": {
    "doc": "Authentication API",
    "title": "UserInfo Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#userinfo-request",
    "relUrl": "/authentication/#userinfo-request"
  },"18": {
    "doc": "Authentication API",
    "title": "Revoke Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Not applicable. | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#revoke-request",
    "relUrl": "/authentication/#revoke-request"
  },"19": {
    "doc": "Authentication API",
    "title": "Authentication API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/authentication/",
    "relUrl": "/authentication/"
  },"20": {
    "doc": "Azure B2C",
    "title": "What is Azure Active Directory B2C ?",
    "content": "Azure Active Directory B2C (Azure AD B2C) is an identity management service that enables custom control of how your customers sign up, sign in, and manage their profiles when using your iOS, Android, .NET, single-page (SPA), and other applications. Azure AD B2C uses standards-based authentication protocols including OpenID Connect, OAuth 2.0, and SAML. It integrates with most modern applications and commercial off-the-shelf software. You can configure Azure AD B2C to allow users to sign in to your application with credentials from itsme®, as we are supporting the OpenID Connect protocol. By integrating with us, you can offer your consumers the ability to sign in with their existing itsme® accounts, without having to create a new account just for your application. On the sign-up or sign-in page, Azure AD B2C presents a list of external identity providers the user can choose for sign-in. Once they select one of the external identity providers, itsme® for example, they’re redirected to the itsme® to complete the sign in process. After the user successfully signs in, they’re returned to Azure AD B2C for authentication of the account in your application. ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#what-is-azure-active-directory-b2c-",
    "relUrl": "/azureB2C/#what-is-azure-active-directory-b2c-"
  },"21": {
    "doc": "Azure B2C",
    "title": "API reference",
    "content": "To see how to add itsme® in Azure AD B2C, see . Configure itsme® OpenID Connect (OIDC) with Azure Active Directory B2C . ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#api-reference",
    "relUrl": "/azureB2C/#api-reference"
  },"22": {
    "doc": "Azure B2C",
    "title": "Azure B2C",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/",
    "relUrl": "/azureB2C/"
  },"23": {
    "doc": "Confirmation API",
    "title": "Overview",
    "content": "itsme® API is based on the Authorization Code Flow of OpenID Connect 1.0. The API can be used to verify the end-users’ identity and obtain basic profile information about gien end-users. The diagram below describes the Confirmation process and how your systems should integrate with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Confirmation event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#overview",
    "relUrl": "/confirmation/#overview"
  },"24": {
    "doc": "Confirmation API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#guides",
    "relUrl": "/confirmation/#guides"
  },"25": {
    "doc": "Confirmation API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the user will be redirected to our Front-End. itsme® then take care of authenticating him. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#generate-itsme-button",
    "relUrl": "/confirmation/#generate-itsme-button"
  },"26": {
    "doc": "Confirmation API",
    "title": "Securing the exchange of information",
    "content": "To protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party, the OpenID Connect protocol uses JSON Web Token (JWT) which can be signed and/or encrypted. itsme® supports 3 cryptographic methods to perform the signing and encryption of JWTs : . | Public- and private-key key pair | secret key | secret key + Proof of Key for Code Exchange PKCE) security extension | . You will have to choose between one of these methods when registering your project. Public- and private-key method and JWKSet URI . This method uses linked public- and private-key pairs to encrypt and decrypt senders’ and recipients’ sensitive data. It is also known as public-key cryptography or public-key encryption. This method requires that each party exposes its public keys as a simple JWK Set document on a URI publicly accessible, and keep its private keys for itself. Using the jwks_uri key retrieve the URI for itsme® from the itsme® Discovery document, . Your public and private key can be generated using your own tool or via Yeoman. If using Yeoman, you need to install generator-itsme with NPM: . $ npm install -g yo generator-itsme . After installation, run the generator: . $ yo itsme . The Yeoman tool will generate two files, the jwks_private.json which MUST be stored securely in your system, and the jwks_public.json which needs to be exposed as a JWK Set on a URI publicly accessible and have the HTTPS scheme . Refer to this section for more information. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme.be and itsme® will make sure to complete the configuration for you in no time! The algorithms – needed to sign and/or encrypt a JWT or to authenticate to our Token Endpoint – are listed in the itsme® Discovery document for more information. Secret key method . Secret key cryptography method uses the same secret key to encrypt and decrypt sensitive information. This approach is the inverse of public- and private-key encryption. This method requires the exchange of a static secret to be held by both the sender and the data receiver. The secret value will be provided by itsme® when registering your project. The algorithms – needed to sign and/or encrypt a JWT or to authenticate to our Token Endpoint – are listed in the itsme® Discovery document for more information. If you choose to go with the secret key method, you will be able to specify if the ID Token JWT needs to be signed with the an asymmetric algorithm (e.g. RS256) or with a symmetric algorithm (e.g. : HS256). When using the RS256 algorithm, our public keys will be needed to verify the signature. This information can be found in our itsme® Discovery document, using the key jwks_uri. PKCE-enhanced flow . When using the secret key cryptography method, itsme® also supports an extra security extension named Proof of Key for Code Exchange (PKCE). This additionnal layer of security is intended mitigate some Authorization Code Interception Attack. It implies adding a random string, named code_verifier, to your Authorization Request and then a SHA256 hash of that string, named code_challenge, to your Token Request. First, you create a code verifier for each Authorization Request, in the following manner : . var code_verifier = 'some-random-string' Should use the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. You then create a code challenge derived from the code verifier by using one of the following transformations on the code verifier : . const crypto = require('crypto') const base64url = require('base64url') var hash = crypto.createHash('sha256').update(code_verifier).digest(); var code_challenge = base64url.encode(hash) //code_verifier MUST be hashed using S256.You are permitted to use plain only if you cannot support S256 for some technical reason. Signing, encrypting and decoding JWTs . Libraries implementing JWT and the JOSE specs JWS, JWE, JWK, and JWA are listed here. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#securing-the-exchange-of-information",
    "relUrl": "/confirmation/#securing-the-exchange-of-information"
  },"27": {
    "doc": "Confirmation API",
    "title": "Certificates and website security",
    "content": "itsme® requires https connections to guarantee security. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. All itsme® API URL we publish use https. All requests to our endpoints MUST also use the SNI extension (refer to the RFC for more information) of the TLS protocol, that allows our servers to provide you with the correct certificate based on which endpoint you are querying. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#certificates-and-website-security",
    "relUrl": "/confirmation/#certificates-and-website-security"
  },"28": {
    "doc": "Confirmation API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the application/x-www-form-urlencoded format, or | response displayed directly on our itsme® sign-in page ; | response using the application/json media type | . Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response : . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. So, OpenID Connect defines a number of rules regarding the format of errors returned from our endpoints. Authorization Endpoint errors . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page. If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the application/x-www-form-urlencoded format : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | access_denied | The User or the Authorization Endpoint denied the request. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Endpoint errors . If the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters in the entity-body of the HTTP response using the application/json media type : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Endpoint errors . When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . For example : . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Revocation Endpoint errors . If the request fails the Revoke Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the application/json media type : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | unsupported_token_type | itsme® does not support the revocation of the presented access token. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#handling-responses",
    "relUrl": "/confirmation/#handling-responses"
  },"29": {
    "doc": "Confirmation API",
    "title": "WYSIWYS template",
    "content": "When building your Authorization Request, one of the below template MUST be specified in the claims parameter. Advanced Payment template . | http://itsme.services/v2/ claim/claim_approval_template_name | This identifies the template used. It MUST be set to \"http://itsme.services/v2/claim/claim_approval_template_name\":{ \"essential\": true, \"value\": \"adv_payment\" }. | . | http://itsme.services/v2/ claim/claim_approval_amount_key | A string holding an integer value inside. This MUST be set to \"http://itsme.services/v2/claim/claim_approval_amount_key\":{ \"essential\": true, \"value\": \"Amount_as_a_string\" }. | . | http://itsme.services/v2/ claim/claim_approval_currency_key | A string holding a valid currency code (e.g. “EUR”). This MUST be set to \"http://itsme.services/v2/claim/claim_approval_currency_key\":{ \"essential\": true, \"value\": \"Currency_as_a_string\" }. | . | http://itsme.services/v2/ claim/claim_approval_iban_key | A string holding a valid IBAN account number. This MUST be set to \"tag:sixdots.be,2016-08:claim_approval_iban_key\":{ \"essential\": true, \"value\": \"IBAN_as_a_string\" }. | . Free Text template . | http://itsme.services/v2/ claim/claim_approval_template_name | This identifies the template used. It MUST be set to \"http://itsme.services/v2/claim/claim_approval_template_name\":{ \"essential\": true, \"value\": \"free_text\" }. | . | http://itsme.services/v2/ claim/claim_approval_text_key | A string holding any text to be displayed in the itsme® app. This MUST be set to\"http://itsme.services/v2/claim/claim_approval_text_key\":{ \"essential\": true, \"value\": \"Text_as_a_string\" }. | . We currently support the following HTML tags in the Free Text template: - &lt; b &gt; - &lt; i &gt; - &lt; u &gt; - &lt; br &gt;. Tags that are not rendered are ignored. The free text template can contain up to 3 lines of 50 characters each. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#wysiwys-template",
    "relUrl": "/confirmation/#wysiwys-template"
  },"30": {
    "doc": "Confirmation API",
    "title": "Mapping the user",
    "content": "Mapping using sub claim . To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. All these flows are depicted in the itsme® B2B portal. Benefit of sub claim . The benefit of using a sub claim is that it will not change, not even if other user attributes (email, phone number, etc.) associated with that account are updated. Deleting and re-creating an itsme® account . In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#mapping-the-user",
    "relUrl": "/confirmation/#mapping-the-user"
  },"31": {
    "doc": "Confirmation API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#api-reference",
    "relUrl": "/confirmation/#api-reference"
  },"32": {
    "doc": "Confirmation API",
    "title": "itsme® Discovery Document",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#itsme-discovery-document",
    "relUrl": "/confirmation/#itsme-discovery-document"
  },"33": {
    "doc": "Confirmation API",
    "title": "Authorization Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Note: when implementing the Confirmation service, you MUST set the WYSIWYS template to pre-structure the transaction screen in the itsme® app (refer to &lt;a href=https://belgianmobileid.github.io/doc/confirmation/#wysiwys-templaten target=\"blank\"&gt;this section&lt;/a&gt; for more information).Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MUST contain the TCP port number 443. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Note: when implementing the Confirmation service, you MUST set the WYSIWYS template to pre-structure the transaction screen in the itsme® app (refer to &lt;a href=https://belgianmobileid.github.io/doc/confirmation/#wysiwys-templaten target=\"blank\"&gt;this section&lt;/a&gt; for more information).Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Note: when implementing the Confirmation service, you MUST set the WYSIWYS template to pre-structure the transaction screen in the itsme® app (refer to &lt;a href=https://belgianmobileid.github.io/doc/confirmation/#wysiwys-templaten target=\"blank\"&gt;this section&lt;/a&gt; for more information).Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . | code_challengeREQUIRED | A challenge derived from the code verifier by using one of the following transformations on the code verifier : plain or S256 method. | . | code_challenge_methodOPTIONAL | Code verifier transformation method.Possible values : plain or S256.It MUST be set to S256. You are permitted to use plain only if you cannot support S256 for some technical reason. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#authorization-request",
    "relUrl": "/confirmation/#authorization-request"
  },"34": {
    "doc": "Confirmation API",
    "title": "Token Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the public- and private-key pair method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID token and access token. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_assertion_typeREQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertionREQUIRED | Is a set of identity and security information, in the form of a JWT, used as an authentication method. To ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code, the JWT MUST be signed, and MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The JWT contains the following claims. | issREQUIRED | The issuer of the token. This value MUST be the same as the client_id. | . | subREQUIRED | The subject of the token. This value MUST be the same as the client_id. | . | audREQUIRED | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jtiREQUIRED | An unique identifier for the token, containing maximum 255 characters. | . | expREQUIRED | The expiration time of the token in seconds since January 1, 1970 UTC. | . | iatOPTIONAL | The time at which the JWT was issued. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . | code_verifierREQUIRED | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\":\"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#token-request",
    "relUrl": "/confirmation/#token-request"
  },"35": {
    "doc": "Confirmation API",
    "title": "UserInfo Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#userinfo-request",
    "relUrl": "/confirmation/#userinfo-request"
  },"36": {
    "doc": "Confirmation API",
    "title": "Revoke Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Not applicable. | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#revoke-request",
    "relUrl": "/confirmation/#revoke-request"
  },"37": {
    "doc": "Confirmation API",
    "title": "Confirmation API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/",
    "relUrl": "/confirmation/"
  },"38": {
    "doc": "itsme - Forgerock",
    "title": "itsme",
    "content": "The itsme digital ID app allows you to sign in securely without card-readers, passwords, two-factor authentication, or multiple PIN codes. The itsme app provides strong customer authentication with a verified identity. In this article, learn how to integrate Forgerock authentication with itsme OpenID Connect (OIDC) using a client secret user flow policy. ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#itsme",
    "relUrl": "/Forgerock/#itsme"
  },"39": {
    "doc": "itsme - Forgerock",
    "title": "Onboard with itsme",
    "content": ". | To create an account with itsme, visit itsme at the Forgerock Marketplace | Activate your itsme account by sending an email to onboarding@itsme.be. You’ll receive a ClientID and Service code that will be needed for your Forgerock setup. | Provide itsme with a public link to your public keys. A tool that can assist you in building those keypairs can be found here: https://belgianmobileid.github.io/slate/jose#1-introduction | Provide itsme with your redirectURI you will be redirecting the user to after he/she has completed the transaction in the app. | . ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#onboard-with-itsme",
    "relUrl": "/Forgerock/#onboard-with-itsme"
  },"40": {
    "doc": "itsme - Forgerock",
    "title": "Prerequisites",
    "content": "This integration relies on the ForgeRock Social Provider Handler Node which is available in ForgeRock Platform 7 and assumes integration between AM and IDM has been configured. | A forgerock account/subscription. If you don’t have a subscription, you can get an account here (insert Forgerock link) | A forgerock tenant that is linked to your forgerock subscription. | Your Client ID, also known as Partner code, provided by itsme. | Your Service code provided by itsme. | Your client secret for your itsme account. | . ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#prerequisites",
    "relUrl": "/Forgerock/#prerequisites"
  },"41": {
    "doc": "itsme - Forgerock",
    "title": "Scenario",
    "content": ". | On your website or application, include the Log in with itsme button by adapting in the Forgerock user flow. The interaction flow starts when the user clicks on this button. | Forgerock starts the OpenID connect flow by sending an Authorize request to the itsme client secret API. A well-known/OpenID-configuration endpoint is available containing information about the endpoints. | The itsme environment redirects the user to the itsme identify yourself page, allowing the user to fill in their phone number. | The itsme environment receives the phone number from the user and validates the correctness. | If the phone number belongs to an active itsme user, an Action is created for the itsme app. | The user opens the itsme app, checks the request, and confirms the action. | The app informs the itsme environment the action has been confirmed. | The itsme environment returns the OAuth authorize code to Forgerock. | Using the authorization code, Forgerock makes a token request. | The itsme environment checks the token request, and if still valid, returns the OAuth access token and the ID token containing the requested user information. | Finally, the user is redirected to the redirect URL as an authenticated user. | . ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#scenario",
    "relUrl": "/Forgerock/#scenario"
  },"42": {
    "doc": "itsme - Forgerock",
    "title": "Configuration between Forgerock and itsme",
    "content": "Step 1: Setup itsme to ForgeRock AM . | Log in to the forgerock Identity cloud | Go to “native consoles” &gt; “access management” | Go to “services” &gt; “social identity provider service” &gt; “secondary configuration” | Select itsme | Populate the details with the parameters you got from itsme: (NOTE: forgerock automatically populates these fields with our production endpoints. Initially, these need to be changed to our E2E endpoints in order to function.) | . | Parameter | Value | . | ClientID | Your Client ID, also known as Partner code | . | Client Secret | Your client_secret | . | Authentication Endpoint URL | “https://idp.e2e.itsme.services/v2/authorization” | . | Token Endpoint | “https://idp.e2e.itsme.services/v2/token” | . | User Profile Service URL | “https://idp.e2e.itsme.services/v2/userinfo” | . | RedirectURI | your redirectURI NOTE: for itsme to function in production, the Forgerock tenant needs to be installed with a custom domain and an OV Cert. Please contact Forgerock support to make sure this is installed on your tenant. | . | OAuth Scopes | openid profile email service:YOURSERVICECODE | . | Client Authentication Method | ENCRYPTED_PRIVATE_KEY_JWT | . | PKCE method | S256 | . | Request Parameter JWT Option | NONE | . | ACR Values | N/A | . | Well Known Endpoint | https://idp.e2e.itsme.services/v2/.well-known/openid-configuration | . | Request Object Audience | “https://idp.e2e.itsme.services/v2/authorization” | . | Issuer | https://idp.e2e.itsme.services/V2/jwkSet | . All other fields can be left on the default settings from Forgerock. | Select ‘itsme profile normalization’ in the transform script drop-down menu. | . Step 2: Define your itsme journey . Go to Journeys and select itsme to build your workflow. There is already a custom flow ready for you to use with itsme. By default, it includes a username/password flow with itsme added as a secondary option, but this can be adapted as you wish. ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#configuration-between-forgerock-and-itsme",
    "relUrl": "/Forgerock/#configuration-between-forgerock-and-itsme"
  },"43": {
    "doc": "itsme - Forgerock",
    "title": "itsme - Forgerock",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/",
    "relUrl": "/Forgerock/"
  },"44": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "In order to start your integration you will first need to setup your personal Sanbox environment. To do so, you will be requested to provide the following information : . | Contact details such as your email, name, phone number. | Organisation details as shown on the company register for your jurisdiction. | Information about the project you want to setup (the services you want to use, the client authentication method you want to set-up, the user attributes you want to request, ...). | . Our onboarding team will review your project and get in touch with you in no time to provide your credentials : . | a “client_id” | a “service_code” | information about your client authentication method | the list of user attributes you can request | . Request your Sandbox . ",
    "url": "https://belgianmobileid.github.io/doc/getting-started/#getting-started",
    "relUrl": "/getting-started/#getting-started"
  },"45": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/getting-started/",
    "relUrl": "/getting-started/"
  },"46": {
    "doc": "Identification API",
    "title": "Overview",
    "content": "itsme® API is based on the Authorization Code Flow of OpenID Connect 1.0. The API can be used to verify the end-users’ identity and obtain basic profile information about gien end-users. The diagram below describes the Identification process and how your systems should integrate with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Identification event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#overview",
    "relUrl": "/identification/#overview"
  },"47": {
    "doc": "Identification API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/identification/#guides",
    "relUrl": "/identification/#guides"
  },"48": {
    "doc": "Identification API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the user will be redirected to our Front-End. itsme® then take care of authenticating him. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#generate-itsme-button",
    "relUrl": "/identification/#generate-itsme-button"
  },"49": {
    "doc": "Identification API",
    "title": "Securing the exchange of information",
    "content": "To protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party, the OpenID Connect protocol uses JSON Web Token (JWT) which can be signed and/or encrypted. itsme® supports 3 cryptographic methods to perform the signing and encryption of JWTs : . | Public- and private-key key pair | secret key | secret key + Proof of Key for Code Exchange PKCE) security extension | . You will have to choose between one of these methods when registering your project. Public- and private-key method and JWKSet URI . This method uses linked public- and private-key pairs to encrypt and decrypt senders’ and recipients’ sensitive data. It is also known as public-key cryptography or public-key encryption. This method requires that each party exposes its public keys as a simple JWK Set document on a URI publicly accessible, and keep its private keys for itself. Using the jwks_uri key retrieve the URI for itsme® from the itsme® Discovery document, . Your public and private key can be generated using your own tool or via Yeoman. If using Yeoman, you need to install generator-itsme with NPM: . $ npm install -g yo generator-itsme . After installation, run the generator: . $ yo itsme . The Yeoman tool will generate two files, the jwks_private.json which MUST be stored securely in your system, and the jwks_public.json which needs to be exposed as a JWK Set on a URI publicly accessible and have the HTTPS scheme . Refer to this section for more information. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme.be and itsme® will make sure to complete the configuration for you in no time! The algorithms – needed to sign and/or encrypt a JWT or to authenticate to our Token Endpoint – are listed in the itsme® Discovery document for more information. Secret key method . Secret key cryptography method uses the same secret key to encrypt and decrypt sensitive information. This approach is the inverse of public- and private-key encryption. This method requires the exchange of a static secret to be held by both the sender and the data receiver. The secret value will be provided by itsme® when registering your project. The algorithms – needed to sign and/or encrypt a JWT or to authenticate to our Token Endpoint – are listed in the itsme® Discovery document for more information. If you choose to go with the secret key method, you will be able to specify if the ID Token JWT needs to be signed with the an asymmetric algorithm (e.g. RS256) or with a symmetric algorithm (e.g. : HS256). When using the RS256 algorithm, our public keys will be needed to verify the signature. This information can be found in our itsme® Discovery document, using the key jwks_uri. PKCE-enhanced flow . When using the secret key cryptography method, itsme® also supports an extra security extension named Proof of Key for Code Exchange (PKCE). This additionnal layer of security is intended mitigate some Authorization Code Interception Attack. It implies adding a random string, named code_verifier, to your Authorization Request and then a SHA256 hash of that string, named code_challenge, to your Token Request. First, you create a code verifier for each Authorization Request, in the following manner : . var code_verifier = 'some-random-string' Should use the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. You then create a code challenge derived from the code verifier by using one of the following transformations on the code verifier : . const crypto = require('crypto') const base64url = require('base64url') var hash = crypto.createHash('sha256').update(code_verifier).digest(); var code_challenge = base64url.encode(hash) //code_verifier MUST be hashed using S256.You are permitted to use plain only if you cannot support S256 for some technical reason. Signing, encrypting and decoding JWTs . Libraries implementing JWT and the JOSE specs JWS, JWE, JWK, and JWA are listed here. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#securing-the-exchange-of-information",
    "relUrl": "/identification/#securing-the-exchange-of-information"
  },"50": {
    "doc": "Identification API",
    "title": "Certificates and website security",
    "content": "itsme® requires https connections to guarantee security. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. All itsme® API URL we publish use https. All requests to our endpoints MUST also use the SNI extension (refer to the RFC for more information) of the TLS protocol, that allows our servers to provide you with the correct certificate based on which endpoint you are querying. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#certificates-and-website-security",
    "relUrl": "/identification/#certificates-and-website-security"
  },"51": {
    "doc": "Identification API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the application/x-www-form-urlencoded format, or | response displayed directly on our itsme® sign-in page ; | response using the application/json media type | . Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response : . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. So, OpenID Connect defines a number of rules regarding the format of errors returned from our endpoints. Authorization Endpoint errors . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page. If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the application/x-www-form-urlencoded format : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | access_denied | The User or the Authorization Endpoint denied the request. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Endpoint errors . If the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters in the entity-body of the HTTP response using the application/json media type : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Endpoint errors . When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . For example : . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Revocation Endpoint errors . If the request fails the Revoke Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the application/json media type : . | errorREQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | unsupported_token_type | itsme® does not support the revocation of the presented access token. | . | . | error_descriptionOPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#handling-responses",
    "relUrl": "/identification/#handling-responses"
  },"52": {
    "doc": "Identification API",
    "title": "Mapping the user",
    "content": "Mapping using sub claim . To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. All these flows are depicted in the itsme® B2B portal. Benefit of sub claim . The benefit of using a sub claim is that it will not change, not even if other user attributes (email, phone number, etc.) associated with that account are updated. Deleting and re-creating an itsme® account . In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#mapping-the-user",
    "relUrl": "/identification/#mapping-the-user"
  },"53": {
    "doc": "Identification API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/identification/#api-reference",
    "relUrl": "/identification/#api-reference"
  },"54": {
    "doc": "Identification API",
    "title": "itsme® Discovery Document",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#itsme-discovery-document",
    "relUrl": "/identification/#itsme-discovery-document"
  },"55": {
    "doc": "Identification API",
    "title": "Authorization Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . When implementing the Identification service, you MUST at least specify one user claim in the scope parameter - profile email address ... - or in the claims parameter - name birthdatehttp://itsme.services/v2/claim/claim_citizenship. Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . &lt;/table&gt; &lt;/td&gt; . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MUST contain the TCP port number 443. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . &lt;/tbody&gt; ### Response 302 application/x-www-form-urlencoded | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . When implementing the Identification service, you MUST at least specify one user claim in the scope parameter - profile email address ... - or in the claims parameter - name birthdatehttp://itsme.services/v2/claim/claim_citizenship. Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . When implementing the Identification service, you MUST at least specify one user claim in the scope parameter - profile email address ... - or in the claims parameter - name birthdatehttp://itsme.services/v2/claim/claim_citizenship. Parameters . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_typeREQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scopeREQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | serviceREQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openidREQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profileOPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | emailOPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phoneOPTIONAL | Returns the phone claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eidOPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumbe claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | stateStrongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonceStrongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_localesOPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | displayOPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_valuesOPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claimsOPTIONAL | Requests specific user's details to be returned from the UserInfo Endpoint or in the ID Token. It is represented as a JSON object that could use as member {\"userinfo\":{...} - which content indicates which claims to return at the UserInfo Endpoint - or {\"id_token\":{...} - which indicates those to return at the ID Token -, together with indication whether the claim is voluntary (default) or essential.Note: to avoid the need of creating an additionnal request, itsme® recomends to create a JSON object using {\"id_token\":{...} as member.Possible user's details your application can request is listed below. | nameOPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_nameOPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_nameOPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdateOPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/birthdate_as_stringOPTIONAL | Returns user's birthday. It is considered as official or at least coming unprocessed from the ID document.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | genderOPTIONAL | Returns user's gender. Possible values are : female male unknown n/aIf requested, a value SHALL always be returned for this claim. | . | localeOPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | pictureOPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file).If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | emailOPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verifiedOPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_numberOPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verifiedOPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim. | . | addressOPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code locality.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_citizenshipOPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/place_of_birthOPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/physical_person_photoOPTIONAL | Returns user's ID picture, represented as a JSON Object containing some or all of these members format value.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL always be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/BEeidSnOPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/claim_deviceOPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_infoOPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumberOPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.If requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityFromOPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/validityToOPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID documents. | . | http://itsme.services/v2/claim/IDDocumentSNOPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentTypeOPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | . | request_uriOPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | requestOPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information). | . | code_challengeREQUIRED | A challenge derived from the code verifier by using one of the following transformations on the code verifier : plain or S256 method. | . | code_challenge_methodOPTIONAL | Code verifier transformation method.Possible values : plain or S256.It MUST be set to S256. You are permitted to use plain only if you cannot support S256 for some technical reason. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=s6BhdRkqt3 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;scope=openid%20service:TEST_code%20profile%20email &amp;nonce=n-0S6_WzA2Mj &amp;state=af0ifjsldkj &amp;acr_values=http://itsme.services/V2/claim/acr_basic . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#authorization-request",
    "relUrl": "/identification/#authorization-request"
  },"56": {
    "doc": "Identification API",
    "title": "Token Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the public- and private-key pair method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID token and access token. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_assertion_typeREQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertionREQUIRED | Is a set of identity and security information, in the form of a JWT, used as an authentication method. To ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code, the JWT MUST be signed, and MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this section for more information).The JWT contains the following claims. | issREQUIRED | The issuer of the token. This value MUST be the same as the client_id. | . | subREQUIRED | The subject of the token. This value MUST be the same as the client_id. | . | audREQUIRED | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jtiREQUIRED | An unique identifier for the token, containing maximum 255 characters. | . | expREQUIRED | The expiration time of the token in seconds since January 1, 1970 UTC. | . | iatOPTIONAL | The time at which the JWT was issued. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. Parameters . | grant_typeREQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_idREQUIRED | It identifies your application. This parameter value is generated during registration. | . | codeREQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uriREQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secretREQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . | code_verifierREQUIRED | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this section for more information). | . | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\":\"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#token-request",
    "relUrl": "/identification/#token-request"
  },"57": {
    "doc": "Identification API",
    "title": "UserInfo Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this section for more information). | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . HTTP/1.1 200 OK Content-Type: application/json { \"sub\": \"248289761001\", \"name\": \"Jane Doe\", \"given_name\": \"Jane\", \"family_name\": \"Doe\", \"preferred_username\": \"j.doe\", \"email\": \"janedoe@example.com\", \"picture\": \"http://example.com/janedoe/me.jpg\" } . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#userinfo-request",
    "relUrl": "/identification/#userinfo-request"
  },"58": {
    "doc": "Identification API",
    "title": "Revoke Request",
    "content": ". | Public- and private-key | Secret key | Secret key + PKCE | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | tokenREQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hintOPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | . Example . | Public- and private-key | Secret key | Secret key + PKCE | . | Not applicable. | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#revoke-request",
    "relUrl": "/identification/#revoke-request"
  },"59": {
    "doc": "Identification API",
    "title": "Identification API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/identification/",
    "relUrl": "/identification/"
  },"60": {
    "doc": "Home",
    "title": "Welcome",
    "content": "We are here to help you to set up itsme® service(s), and allow you to use verified identities for authentication and authorization on web desktop, mobile web or mobile applications. For more details, please read through the corresponding developer documentation available below. ",
    "url": "https://belgianmobileid.github.io/doc/index#welcome",
    "relUrl": "/index#welcome"
  },"61": {
    "doc": "Home",
    "title": "Get set-up",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/index#get-set-up",
    "relUrl": "/index#get-set-up"
  },"62": {
    "doc": "Home",
    "title": "Onboarding",
    "content": "Get your project registered in order to start the integration. Getting started ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"63": {
    "doc": "Home",
    "title": "Services and integration APIs",
    "content": "For more information on how itsme® can best work for your business, please contact us. itsme® team will be happy to help. ",
    "url": "https://belgianmobileid.github.io/doc/index#services-and-integration-apis",
    "relUrl": "/index#services-and-integration-apis"
  },"64": {
    "doc": "Home",
    "title": "Authentication",
    "content": "This Service enables your users/customers to log in securely to your application. Direct integration API Azure B2C API ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"65": {
    "doc": "Home",
    "title": "Identification",
    "content": "This Service enables you to identify your users and access their verified data. Direct integration API Azure B2C API ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"66": {
    "doc": "Home",
    "title": "Confirmation",
    "content": "This Service enables your users/customers to give their consent to a payment or order/action. Direct integration API ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"67": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"68": {
    "doc": "Test",
    "title": "testing code snippet",
    "content": "// Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . $ npm install -g yo generator-itsme . &lt;code style=display:block;white-space:pre-wrap&gt;$ npm install -g yo generator-itsme&lt;/code&gt; . | Parameter | Description | . | Param1required | Global description of Param1 | subparam1optional | description of subparam1 | . | subparam2required | description of subparam2 | . | . | Param2optional | Global description of Param2 | . ",
    "url": "https://belgianmobileid.github.io/doc/test/#testing-code-snippet",
    "relUrl": "/test/#testing-code-snippet"
  },"69": {
    "doc": "Test",
    "title": "Test",
    "content": "Voilà une page de test de Jekyll . First tabs . | js | ruby | . | tagada . | tsoin tsoin here goes some code . | . Second tabs . | yaml | json | . | hello: . | ‘whatsup’ | ‘hi’ | . | { “hello”: [“whatsup”, “hi”] } . | . ",
    "url": "https://belgianmobileid.github.io/doc/test/",
    "relUrl": "/test/"
  }
}
