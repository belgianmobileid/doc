{"0": {
    "doc": "itsme - Forgerock",
    "title": "itsme",
    "content": "The itsme digital ID app allows you to sign in securely without card-readers, passwords, two-factor authentication, or multiple PIN codes. The itsme app provides strong customer authentication with a verified identity. In this article, learn how to integrate Forgerock authentication with itsme OpenID Connect (OIDC) using a client secret user flow policy. ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#itsme",
    "relUrl": "/Forgerock/#itsme"
  },"1": {
    "doc": "itsme - Forgerock",
    "title": "Onboard with itsme",
    "content": ". | Activate your itsme account by sending an email to onboarding@itsme.be. You’ll receive a ClientID and Service code that will be needed for your Forgerock setup. | Provide itsme with a public link to your public keys. A tool that can assist you in building those keypairs can be found here: https://belgianmobileid.github.io/slate/jose#1-introduction | Provide itsme with your redirectURI you will be redirecting the user to after he/she has completed the transaction in the app (such as https://openam-itsme-demo.forgeblocks.com/am) | . ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#onboard-with-itsme",
    "relUrl": "/Forgerock/#onboard-with-itsme"
  },"2": {
    "doc": "itsme - Forgerock",
    "title": "Prerequisites",
    "content": "This integration relies on the ForgeRock Social Provider Handler Node which is available in ForgeRock Platform 7 and assumes integration between AM and IDM has been configured. | A Forgerock account/subscription. If you don’t have a subscription, please contact Forgerock at https://www.forgerock.com/contact | A Forgerock tenant that is linked to your forgerock subscription. | Your Client ID, also known as Partner code, provided by itsme. | Your Service code provided by itsme. | Your client secret for your itsme account. | . ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#prerequisites",
    "relUrl": "/Forgerock/#prerequisites"
  },"3": {
    "doc": "itsme - Forgerock",
    "title": "Scenario",
    "content": ". | On your website or application, include the Log in with itsme button by adapting in the Forgerock user flow. The interaction flow starts when the user clicks on this button. | Forgerock starts the OpenID connect flow by sending an Authorize request to the itsme client secret API. A well-known/OpenID-configuration endpoint is available containing information about the endpoints. | The itsme environment redirects the user to the itsme identify yourself page, allowing the user to fill in their phone number. | The itsme environment receives the phone number from the user and validates the correctness. | If the phone number belongs to an active itsme user, an Action is created for the itsme app. | The user opens the itsme app, checks the request, and confirms the action. | The app informs the itsme environment the action has been confirmed. | The itsme environment returns the OAuth authorize code to Forgerock. | Using the authorization code, Forgerock makes a token request. | The itsme environment checks the token request, and if still valid, returns the OAuth access token and the ID token containing the requested user information. | Finally, the user is redirected to the redirect URL as an authenticated user. | . ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#scenario",
    "relUrl": "/Forgerock/#scenario"
  },"4": {
    "doc": "itsme - Forgerock",
    "title": "Configuration between Forgerock and itsme",
    "content": "Step 1: Setup itsme to ForgeRock AM . | Log in to the forgerock Identity cloud | Go to “native consoles” &gt; “access management” | Go to “services” &gt; “social identity provider service” &gt; “secondary configuration” | Select itsme | Populate the details with the parameters you got from itsme: (NOTE: Forgerock automatically populates these fields with our production endpoints. Initially, these need to be changed to our E2E endpoints in order to function.) | . | Parameter | Value | . | ClientID | Your Client ID, also known as Partner code | . | Client Secret | Your client_secret | . | Authentication Endpoint URL | “https://idp.e2e.itsme.services/v2/authorization” | . | Token Endpoint | “https://idp.e2e.itsme.services/v2/token” | . | User Profile Service URL | “https://idp.e2e.itsme.services/v2/userinfo” | . | RedirectURI | your redirectURI NOTE: for itsme to function in production, the Forgerock tenant needs to be installed with a custom domain (https://backstage.forgerock.com/docs/idcloud/latest/realms/custom-domains.html#set_up_a_custom_domain_in_identity_cloud) and an OV Cert. Please contact Forgerock support to make sure this is installed on your tenant. | . | OAuth Scopes | openid profile email service:YOURSERVICECODE | . | Client Authentication Method | ENCRYPTED_PRIVATE_KEY_JWT | . | PKCE method | S256 | . | Request Parameter JWT Option | NONE | . | ACR Values | N/A | . | Well Known Endpoint | https://idp.e2e.itsme.services/v2/.well-known/openid-configuration | . | Request Object Audience | “https://idp.e2e.itsme.services/v2/authorization” | . | Issuer | https://idp.e2e.itsme.services/V2/jwkSet | . All other fields can be left on the default settings from Forgerock. | Select ‘itsme profile normalization’ in the transform script drop-down menu. | . Step 2: Define your itsme journey . Go to Journeys and select itsme to build your workflow. There is already a custom flow ready for you to use with itsme. By default, it includes a username/password flow with itsme added as a secondary option, but this can be adapted as you wish. ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/#configuration-between-forgerock-and-itsme",
    "relUrl": "/Forgerock/#configuration-between-forgerock-and-itsme"
  },"5": {
    "doc": "itsme - Forgerock",
    "title": "itsme - Forgerock",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/Forgerock/",
    "relUrl": "/Forgerock/"
  },"6": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "In order to start your integration you will first need to setup your personal Sanbox environment. To do so, you will be requested to provide the following information : . | Contact details such as your email, name, phone number. | Organisation details as shown on the company register for your jurisdiction. | Information about the project you want to setup (the services you want to use, the client authentication method you want to set-up, the user attributes you want to request, ...). | . Our onboarding team will review your project and get in touch with you in no time to provide your credentials : . | a “client_id” | a “service_code” | information about your client authentication method | the list of user attributes you can request | . Request your Sandbox . ",
    "url": "https://belgianmobileid.github.io/doc/getting-started/#getting-started",
    "relUrl": "/getting-started/#getting-started"
  },"7": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/getting-started/",
    "relUrl": "/getting-started/"
  },"8": {
    "doc": "Home",
    "title": "Welcome",
    "content": "We are here to help you to set up itsme® service(s), and allow you to use verified identities for authentication and authorization on web desktop, mobile web or mobile applications. For more details, please read through the corresponding developer documentation available below. ",
    "url": "https://belgianmobileid.github.io/doc/index#welcome",
    "relUrl": "/index#welcome"
  },"9": {
    "doc": "Home",
    "title": "Get set-up",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/index#get-set-up",
    "relUrl": "/index#get-set-up"
  },"10": {
    "doc": "Home",
    "title": "Onboarding",
    "content": "Get your project registered in order to start the integration. Getting started ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"11": {
    "doc": "Home",
    "title": "Services and integration APIs",
    "content": "For more information on how itsme® can best work for your business, please contact us. itsme® team will be happy to help. ",
    "url": "https://belgianmobileid.github.io/doc/index#services-and-integration-apis",
    "relUrl": "/index#services-and-integration-apis"
  },"12": {
    "doc": "Home",
    "title": "Authentication",
    "content": "This Service enables your users/customers to log in securely to your application. Direct integration API Azure B2C API ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"13": {
    "doc": "Home",
    "title": "Identification",
    "content": "This Service enables you to identify your users and access their verified data. Direct integration API Azure B2C API ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"14": {
    "doc": "Home",
    "title": "Confirmation",
    "content": "This Service enables your users/customers to give their consent to a payment or order/action. Direct integration API ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"15": {
    "doc": "Home",
    "title": "Qualified signature",
    "content": "This Service enables your users/customers to sign documents with the same legally binding effect as a manual signature. CSC Sign protocol OASIS DSS protocol ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"16": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/index",
    "relUrl": "/index"
  },"17": {
    "doc": "Test",
    "title": "testing code snippet",
    "content": "// Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . $ npm install -g yo generator-itsme . &lt;code style=display:block;white-space:pre-wrap&gt;$ npm install -g yo generator-itsme&lt;/code&gt; . | Parameter | Description | . | Param1 required | Global description of Param1 | subparam1 optional | description of subparam1 | . | subparam2 required | description of subparam2 | . | . | Param2 optional | Global description of Param2 | . ",
    "url": "https://belgianmobileid.github.io/doc/test/#testing-code-snippet",
    "relUrl": "/test/#testing-code-snippet"
  },"18": {
    "doc": "Test",
    "title": "Test",
    "content": "Voilà une page de test de Jekyll . First tabs . | js | ruby | . | tagada . | tsoin tsoin here goes some code . | . Second tabs . | yaml | json | . | hello: . | ‘whatsup’ | ‘hi’ | . | { “hello”: [“whatsup”, “hi”] } . | . ",
    "url": "https://belgianmobileid.github.io/doc/test/",
    "relUrl": "/test/"
  },"19": {
    "doc": "Authentication API",
    "title": "Overview",
    "content": "itsme® API is based on the Authorization Code Flow of OpenID Connect 1.0. The API can be used to verify the end-users’ identity and obtain basic profile information about gien end-users. The diagram below describes the Authentication process and how your systems should integrate with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Authentication event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#overview",
    "relUrl": "/authentication/#overview"
  },"20": {
    "doc": "Authentication API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#guides",
    "relUrl": "/authentication/#guides"
  },"21": {
    "doc": "Authentication API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the user will be redirected to our Front-End. itsme® then take care of their authentication”. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#generate-itsme-button",
    "relUrl": "/authentication/#generate-itsme-button"
  },"22": {
    "doc": "Authentication API",
    "title": "Securing the exchange of information",
    "content": "To protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party, the OpenID Connect protocol uses JSON Web Token (JWT) which can be signed and/or encrypted. Among the methods described in OpenID specification, itsme® supports 2 authentication methods to secure communications between your backend and itsme®: . | \"Private key JWT\" is based on a public/private key pair (asymmetric encryption). It is therefore the most secure option | \"Client secret\" is based on a shared Secret key (symmetric encryption). It can be easier to implement in some cases | . You will have to choose between one of these methods when registering your project. Public-private key pair and JWKSet URI . This method uses a pair of keys (1 public, 1 private) to encrypt and decrypt senders’ and recipients’ sensitive data. It is also known as public-key cryptography or asymetric encryption. This method requires that each party exposes its public keys in the form of a JWK Set document on a publicly accessible URI, and keep its private keys for itself. You can retrieve the itsme® JWK Set from the URI mentioned as jwks_uri in our itsme® Discovery document. Refer to this page for more on signing and encrypting tokens. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme-id.com and itsme® will make sure to complete the configuration for you in no time! The algorithms – needed to sign and encrypt a JWT – are listed in the itsme® Discovery document for more information. Secret key method . Secret key cryptography method uses the same secret key to encrypt and decrypt sensitive information. This approach is the inverse of public- and private-key encryption. This method requires the exchange of a static secret to be held by both the sender and the data receiver. The secret value will be provided by itsme® when registering your project. The algorithms – needed to sign and encrypt a JWT – are listed in the itsme® Discovery document for more information. If you choose to go with the secret key method, you will be able to specify if the ID Token JWT needs to be signed with the an asymmetric algorithm (e.g. RS256) or with a symmetric algorithm (e.g. : HS256). When using the RS256 algorithm, our public keys will be needed to verify the signature. This information can be found in our itsme® Discovery document, using the key jwks_uri. PKCE-enhanced flow . Whatever the chosen authentication method, itsme® also supports an extra security extension named Proof of Key for Code Exchange (PKCE). This additionnal layer of security is intended to mitigate some Authorization Code interception attacks. For this mechanism to achieve its full potential, PKCE has to be made mandatory in your flow, which is an option we can enable for you (strongly recommended). Please ask our onboarding team to do so when registering your project. If this option is not enabled, you are still free to use PKCE for some added security but requests without the PKCE code_challenge will be accepted as well at itsme® side. PKCE implies choosing a random string, named code_verifier, and then generating a SHA256 hash of that string, named code_challenge. The code_challenge has to be sent along with the Authorization Request, while the code_verifier must be sent with the Token Request, allowing our backend to make sure both requests are issued by the same source. code_verifier MUST contain only the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. code_challenge can then be obtained via this kind of instructions: . var hash = code_verifier.createHash('sha256'); var code_challenge = base64url.encode(hash); . Signing, encrypting and decoding JWTs . Libraries implementing JWT and the JOSE specs JWS, JWE, JWK, and JWA are listed here. For testing purposes only, we could advise the use of https://mkjwk.org/ for JWK generation and https://mkjose.org/ for payload check =&gt; these are 2 open-source tools which will help you visualize JWK mechanisms, client assertion construct. Please DO NOT generate production private keys on any website. Rather opt for the relevant SDK library mentioned here. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#securing-the-exchange-of-information",
    "relUrl": "/authentication/#securing-the-exchange-of-information"
  },"23": {
    "doc": "Authentication API",
    "title": "Certificates and website security",
    "content": "itsme® requires https connections to guarantee security. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. All itsme® API URL we publish use https. All requests to our endpoints MUST also use the SNI extension (refer to the RFC for more information) of the TLS protocol, that allows our servers to provide you with the correct certificate based on which endpoint you are querying. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#certificates-and-website-security",
    "relUrl": "/authentication/#certificates-and-website-security"
  },"24": {
    "doc": "Authentication API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the application/x-www-form-urlencoded format, or | response displayed directly on our itsme® sign-in page ; | response using the application/json media type | . Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response : . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. So, OpenID Connect defines a number of rules regarding the format of errors returned from our endpoints. Authorization Endpoint errors . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page. If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the application/x-www-form-urlencoded format : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | access_denied | The User or the Authorization Endpoint denied the request. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Endpoint errors . If the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters in the entity-body of the HTTP response using the application/json media type : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . For example : . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Endpoint errors . When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . For example : . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Revocation Endpoint errors . If the request fails the Revoke Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the application/json media type : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | unsupported_token_type | itsme® does not support the revocation of the presented access token. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#handling-responses",
    "relUrl": "/authentication/#handling-responses"
  },"25": {
    "doc": "Authentication API",
    "title": "Mapping the user",
    "content": "Mapping using sub claim . To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. Benefit of sub claim . The benefit of using a sub claim is that it will not change, not even if other user attributes (email, phone number, etc.) associated with that account are updated. Deleting and re-creating an itsme® account . In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#mapping-the-user",
    "relUrl": "/authentication/#mapping-the-user"
  },"26": {
    "doc": "Authentication API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#api-reference",
    "relUrl": "/authentication/#api-reference"
  },"27": {
    "doc": "Authentication API",
    "title": "itsme® Discovery Document",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#itsme-discovery-document",
    "relUrl": "/authentication/#itsme-discovery-document"
  },"28": {
    "doc": "Authentication API",
    "title": "Authorization Request",
    "content": ". | Public- and private-key | Secret Key | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . Parameters . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_type REQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scope REQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | service REQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openid REQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profile OPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | email OPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phone OPTIONAL | Returns the phone_number claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eid OPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumber claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | state Strongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonce Strongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_locales OPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | display OPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_values OPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claims OPTIONAL | Allows to request specific user's details (\"claims\"). You can choose to receive those claims either in the ID Token (from /token endpoint) or in the UserInfo object (from /userinfo endpoint).It MUST be a JSON object containing an {\"id_token\":{...}} member or a {\"userinfo\":{...}} member respectively. This member will then contain all the desired claims together with indication whether the claim is voluntary (returned if available) or essential (flow will stop if unavailable) - see example below.Note: to avoid the need of a /userinfo request, itsme® recommends to retrieve the claims directly from the ID Token.Supported claims are listed below. | name OPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_name OPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_name OPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdate OPTIONAL | Return user's birthdate, represented as a string in YYYY-MM-DD date format. itsme® users are always 16 years old or more.BE: A value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate_as_string claim: at least one of the 2 SHALL return a value.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/birthdate_as_string OPTIONAL | Returns user's birthdate in an unprocessed way, as mentioned on the ID document. itsme® users are always 16 years old or more.BE: A value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate claim: at least one of the 2 SHALL return a value.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | gender OPTIONAL | Returns user's gender. Possible values are : female male unknown n/aBE: A value SHALL always be returned for users with a Belgian ID document. Belgian accounts can only be female or maleNL: A value MAY NOT be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | locale OPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | picture OPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file). This image is the raw (unprocessed) image contained on the ID document.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. Accessing this URL has to be done with your bearer token. Example: GET /v2/picture HTTP/1.1 Host: idp.prd.itsme.services Authorization: Bearer SlAV32hkKG | . | http://itsme.services/v2/claim/physical_person_photo OPTIONAL | Returns user's ID picture, represented as a JSON Object containing these members:format: the MIME typevalue: the base64 encoded image.This picture is read from the ID document but converted to always return a 200x140 px, 24 BPP JPEG image.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | email OPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verified OPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_number OPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verified OPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim.Note: currently, all phone numbers are verified so this claims always returns true. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members: formatted street_address postal_code locality.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_citizenship OPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/claim_citizenship_as_iso OPTIONAL | Returns user's nationality. The format is always ISO 3166-1 alpha-3.BE: Please be aware that this claim is computed by itsme® for users with a Belgian ID document on a best effort basis. For the original value as stored on the ID document, see http://itsme.services/v2/claim/claim_citizenship above. Therefore, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/place_of_birth OPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/BEeidSn OPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens. This claim is made redundant by the IDDocumentSN claim below which we advise to use instead.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_device OPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_info OPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumber OPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityFrom OPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityTo OPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID document. | . | http://itsme.services/v2/claim/verificationDate OPTIONAL | Returns the date when the user's document was read for the last time, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/IDDocumentSN OPTIONAL | Returns the Dutch or Luxembourgish ID card/passport number, represented as a string. (NL doc SN is composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the NL document numbers. The digit ‘0’ (zero) MAY be used.)If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentType OPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDIssuingCountry OPTIONAL | Returns the 3-letters iso code of the country that issued the identity document.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/issuance_locality OPTIONAL | Returns the locality that issued the ID document used to create the itsme® account.If requested, a value MAY NOT be returned for this claim. | . | . | request_uri OPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MUST also be encrypted and more precisely: it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MUST contain the TCP port number 443. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | request OPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MUST also be encrypted and more precisely: it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information). | . | code_challenge OPTIONAL | A challenge derived from the code verifier by applying a S256 hash. This parameter is REQUIRED if you requested PKCE to be enforced. | . | code_challenge_method OPTIONAL | Code verifier transformation method.It MUST be set to S256. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_type REQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scope REQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | service REQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openid REQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profile OPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | email OPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phone OPTIONAL | Returns the phone_number claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eid OPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumber claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | state Strongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonce Strongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_locales OPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | display OPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_values OPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claims OPTIONAL | Allows to request specific user's details (\"claims\"). You can choose to receive those claims either in the ID Token (from /token endpoint) or in the UserInfo object (from /userinfo endpoint).It MUST be a JSON object containing an {\"id_token\":{...}} member or a {\"userinfo\":{...}} member respectively. This member will then contain all the desired claims - see example below.Note: to avoid the need of a /userinfo request, itsme® recommends to retrieve the claims directly from the ID Token.Supported claims are listed below. | name OPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_name OPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_name OPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdate OPTIONAL | Return user's birthday, represented as a string in YYYY-MM-DD date format. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate_as_string claim: at least one of the 2 SHALL return a value.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/birthdate_as_string OPTIONAL | Returns user's birthdate in an unprocessed way, as mentioned on the ID document. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate claim: at least one of the 2 SHALL return a value.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | gender OPTIONAL | Returns user's gender. Possible values are : female male unknown n/aBE: A value SHALL always be returned for users with a Belgian ID document. Belgian accounts can only be female or maleNL: A value MAY NOT be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | locale OPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | picture OPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file). This image is the raw (unprocessed) image contained on the ID document.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. Accessing this URL has to be done with your bearer token. Example: GET /v2/picture HTTP/1.1 Host: idp.prd.itsme.services Authorization: Bearer SlAV32hkKG | . | http://itsme.services/v2/claim/physical_person_photo OPTIONAL | Returns user's ID picture, represented as a JSON Object containing these members:format: the MIME typevalue: the base64 encoded image.This picture is read from the ID document but converted to always return a 200x140 px, 24 BPP JPEG image.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | email OPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned. | . | email_verified OPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_number OPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verified OPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim.Note: currently, all phone numbers are verified so this claims always returns true. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members: formatted street_address postal_code locality.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_citizenship OPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/claim_citizenship_as_iso OPTIONAL | Returns user's nationality. The format is always ISO 3166-1 alpha-3.BE: Please be aware that this claim is computed by itsme® for users with a Belgian ID document on a best effort basis. For the original value as stored on the ID document, see http://itsme.services/v2/claim/claim_citizenship above. Therefore, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/place_of_birth OPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/BEeidSn OPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens. This claim is made redundant by the IDDocumentSN claim below which we advise to use instead.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_device OPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_info OPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumber OPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityFrom OPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityTo OPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID document. | . | http://itsme.services/v2/claim/verificationDate OPTIONAL | Returns the date when the user's document was read for the last time, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/IDDocumentSN OPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentType OPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/issuance_locality OPTIONAL | Returns the locality that issued the ID document used to create the itsme® account.If requested, a value MAY NOT be returned for this claim. | . | . | request_uri OPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | request OPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information). | . | code_challenge OPTIONAL | A challenge derived from the code verifier by applying a S256 hash. This parameter is REQUIRED if you requested PKCE to be enforced. | . | code_challenge_method OPTIONAL | Code verifier transformation method.It MUST be set to S256. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | Public- and private-key | Secret key | . | Request . GET /v2/authorization HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=abcd1234 &amp;redirect_uri=https://client.example.org/cb &amp;scope=openid+service:EXAMPLE+profile+eid+phone+email+address &amp;state=anystate &amp;nonce=anonce &amp;prompt=login &amp;max_age=1 &amp;claims={\"id_token\":{ \"name\":null, \"gender\":null, \"http://itsme.services/v2/claim/BENationalNumber\":null, \"http://itsme.services/v2/claim/claim_citizenship\":null, \"http://itsme.services/v2/claim/place_of_birth\":null, \"http://itsme.services/v2/claim/physical_person_photo\":null, \"http://itsme.services/v2/claim/birthdate_as_string\":null, \"http://itsme.services/v2/claim/validityFrom\":null, \"http://itsme.services/v2/claim/validityTo\":null, \"http://itsme.services/v2/claim/IDDocumentSN\":null}} . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=anystate . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=abcd1234 &amp;redirect_uri=https://client.example.org/cb &amp;scope=openid+service:EXAMPLE+profile+eid+phone+email+address &amp;state=anystate &amp;nonce=anonce &amp;prompt=login &amp;max_age=1 &amp;claims={\"id_token\":{ \"name\":null, \"gender\":null, \"http://itsme.services/v2/claim/BENationalNumber\":null, \"http://itsme.services/v2/claim/claim_citizenship\":null, \"http://itsme.services/v2/claim/place_of_birth\":null, \"http://itsme.services/v2/claim/physical_person_photo\":null, \"http://itsme.services/v2/claim/birthdate_as_string\":null, \"http://itsme.services/v2/claim/validityFrom\":null, \"http://itsme.services/v2/claim/validityTo\":null, \"http://itsme.services/v2/claim/IDDocumentSN\":null}} . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#authorization-request",
    "relUrl": "/authentication/#authorization-request"
  },"29": {
    "doc": "Authentication API",
    "title": "Token Request",
    "content": ". | Public- and private-key | Secret key | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the public- and private-key pair method. The parameters below must be included in the body of the POST request, not in the query string. Parameters . | grant_type REQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID token and access token. | . | code REQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | code_verifier OPTIONAL | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. This parameter is REQUIRED if you required PKCE to be enforced. | . | client_assertion_type REQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertion REQUIRED | Is a set of identity and security information, in the form of a JWT, used as an authentication method. To ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code, the JWT MUST be signed, and MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The JWT contains the following claims. | iss REQUIRED | The issuer of the token. This value MUST be the same as the client_id. | . | sub REQUIRED | The subject of the token. This value MUST be the same as the client_id. | . | aud REQUIRED | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jti REQUIRED | An unique identifier for the token, containing maximum 255 characters. | . | exp REQUIRED | The expiration time of the token in seconds since January 1, 1970 UTC. | . | iat OPTIONAL | The time at which the JWT was issued. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this page for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. The parameters below must be included in the body of the POST request, not in the query string. Parameters . | grant_type REQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | code REQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secret REQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . | code_verifier OPTIONAL | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. This parameter is REQUIRED if you required PKCE to be enforced. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this page for more information). | . | . Example . | Public- and private-key | Secret key | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#token-request",
    "relUrl": "/authentication/#token-request"
  },"30": {
    "doc": "Authentication API",
    "title": "UserInfo Request",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this page for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this page for more information). | . Example . Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . This is an response example containing all possible claims for a Belgian account: . HTTP/1.1 200 OK Content-Type: application/json { \"http://itsme.services/v2/claim/validityFrom\": { \"http://itsme.services/v2/claim/BEeidSn\": \"2018-11-08T00:00:00Z\" }, \"sub\": \"e3xad7upx64grm14ttpnx4c586ve8gy0gp38\", \"birthdate\": \"1978-11-01\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"BEL\", \"gender\": \"male\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"01.11.1978\", \"http://itsme.services/v2/claim/IDDocumentType\": \"I\", \"iss\": \"https://oidc.uat.itsme.services/clientsecret-oidc/csapi/v0.1\", \"http://itsme.services/v2/claim/validityTo\": { \"http://itsme.services/v2/claim/BEeidSn\": \"2028-11-10T00:00:00Z\" }, \"http://itsme.services/v2/claim/claim_citizenship\": \"BE\", \"locale\": \"FR\", \"http://itsme.services/v2/claim/issuance_locality\": { \"http://itsme.services/v2/claim/BEeidSn\": \"BRUXELLES\" }, \"email\": \"test@itsme.be\", \"http://itsme.services/v2/claim/place_of_birth\": { \"city\": \"Brussels\", \"formatted\": \"Brussels\" }, \"address\": { \"locality\": \"TONGEREN\", \"street_address\": \"Jekerstraat 39\", \"postal_code\": \"3700\", \"formatted\": \"Jekerstraat 39 3700 TONGEREN\" }, \"email_verified\": false, \"http://itsme.services/v2/claim/claim_device\": { \"os\": \"ANDROID\", \"appName\": \"be.bmid.itsme.uat\", \"appRelease\": \"4.0.0\", \"deviceLabel\": \"lucye\", \"debugEnabled\": false, \"deviceId\": \"c22de2331dd249bba063afd3507fe3a4f\", \"osRelease\": \"9\", \"manufacturer\": \"LGE\", \"deviceLockLevel\": \"true\", \"rooted\": false, \"deviceModel\": \"LG-H870\", \"msisdn\": \"0032485694175\" }, \"http://itsme.services/v2/claim/BENationalNumber\": \"99060427181\", \"phone_number_verified\": true, \"given_name\": \"George\", \"picture\": \"https://oidc.uat.itsme.services/clientsecret-oidc/csapi/v0.1/picture\", \"http://itsme.services/v2/claim/verificationDate\": { \"http://itsme.services/v2/claim/place_of_birth\": \"2023-04-12T15:02:23Z\", \"birthdate\": \"2023-04-12T15:02:23Z\", \"address\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"2023-04-12T15:02:23Z\", \"gender\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/BENationalNumber\": \"2023-04-12T15:02:23Z\", \"given_name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/claim_citizenship\": \"2023-04-12T15:02:23Z\", \"picture\": \"2023-04-12T15:02:23Z\", \"name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/BEeidSn\": \"2023-04-12T15:02:23Z\", \"family_name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/physical_person_photo\": \"2023-04-12T15:02:23Z\" }, \"aud\": \"WXw9DMqkEv\", \"http://itsme.services/v2/claim/IDIssuingCountry\": { \"http://itsme.services/v2/claim/place_of_birth\": \"BEL\", \"birthdate\": \"BEL\", \"address\": \"BEL\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"BEL\", \"gender\": \"BEL\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"BEL\", \"http://itsme.services/v2/claim/BENationalNumber\": \"BEL\", \"given_name\": \"BEL\", \"http://itsme.services/v2/claim/claim_citizenship\": \"BEL\", \"picture\": \"BEL\", \"name\": \"BEL\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"BEL\", \"http://itsme.services/v2/claim/BEeidSn\": \"BEL\", \"family_name\": \"BEL\", \"http://itsme.services/v2/claim/physical_person_photo\": \"BEL\" }, \"name\": \"George Tǎnka\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"431522485012\", \"phone_number\": \"+32 485694175\", \"http://itsme.services/v2/claim/BEeidSn\": \"431522485012\", \"family_name\": \"Tǎnka\", \"http://itsme.services/v2/claim/physical_person_photo\": { \"format\": \"image/jpeg\", \"value\": \"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\" }, \"nbf\": 1681314190, \"exp\": 1681314490, \"iat\": 1681314190 } . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#userinfo-request",
    "relUrl": "/authentication/#userinfo-request"
  },"31": {
    "doc": "Authentication API",
    "title": "Revoke Request",
    "content": ". | Public- and private-key | Secret key | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | token REQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hint OPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | . Example . | Public- and private-key | Secret key | . | Not applicable. | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | . ",
    "url": "https://belgianmobileid.github.io/doc/authentication/#revoke-request",
    "relUrl": "/authentication/#revoke-request"
  },"32": {
    "doc": "Authentication API",
    "title": "Authentication API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/authentication/",
    "relUrl": "/authentication/"
  },"33": {
    "doc": "Confirmation API",
    "title": "Overview",
    "content": "itsme® API is based on the Authorization Code Flow of OpenID Connect 1.0. The API can be used to verify the end-users’ identity and obtain basic profile information about gien end-users. The diagram below describes the Confirmation process and how your systems should integrate with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Confirmation event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#overview",
    "relUrl": "/confirmation/#overview"
  },"34": {
    "doc": "Confirmation API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#guides",
    "relUrl": "/confirmation/#guides"
  },"35": {
    "doc": "Confirmation API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the user will be redirected to our Front-End. itsme® then take care of their authentication. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#generate-itsme-button",
    "relUrl": "/confirmation/#generate-itsme-button"
  },"36": {
    "doc": "Confirmation API",
    "title": "Securing the exchange of information",
    "content": "To protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party, the OpenID Connect protocol uses JSON Web Token (JWT) which can be signed and/or encrypted. Among the methods described in OpenID specification, itsme® supports 2 authentication methods to secure communications between your backend and itsme®: . | \"Private key JWT\" is based on a public/private key pair (asymmetric encryption). It is therefore the most secure option | \"Client secret\" is based on a shared Secret key (symmetric encryption). It can be easier to implement in some cases | . You will have to choose between one of these methods when registering your project. Public-private key pair and JWKSet URI . This method uses a pair of keys (1 public, 1 private) to encrypt and decrypt senders’ and recipients’ sensitive data. It is also known as public-key cryptography or asymetric encryption. This method requires that each party exposes its public keys in the form of a JWK Set document on a publicly accessible URI, and keep its private keys for itself. You can retrieve the itsme® JWK Set from the URI mentioned as jwks_uri in our itsme® Discovery document. Refer to this page for more on signing and encrypting tokens. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme-id.com and itsme® will make sure to complete the configuration for you in no time! The algorithms – needed to sign and encrypt a JWT – are listed in the itsme® Discovery document for more information. Secret key method . Secret key cryptography method uses the same secret key to encrypt and decrypt sensitive information. This approach is the inverse of public- and private-key encryption. This method requires the exchange of a static secret to be held by both the sender and the data receiver. The secret value will be provided by itsme® when registering your project. The algorithms – needed to sign and encrypt a JWT – are listed in the itsme® Discovery document for more information. If you choose to go with the secret key method, you will be able to specify if the ID Token JWT needs to be signed with the an asymmetric algorithm (e.g. RS256) or with a symmetric algorithm (e.g. : HS256). When using the RS256 algorithm, our public keys will be needed to verify the signature. This information can be found in our itsme® Discovery document, using the key jwks_uri. PKCE-enhanced flow . Whatever the chosen authentication method, itsme® also supports an extra security extension named Proof of Key for Code Exchange (PKCE). This additionnal layer of security is intended to mitigate some Authorization Code interception attacks. For this mechanism to achieve its full potential, PKCE has to be made mandatory in your flow, which is an option we can enable for you (strongly recommended). Please ask our onboarding team to do so when registering your project. If this option is not enabled, you are still free to use PKCE for some added security but requests without the PKCE code_challenge will be accepted as well at itsme® side. PKCE implies choosing a random string, named code_verifier, and then generating a SHA256 hash of that string, named code_challenge. The code_challenge has to be sent along with the Authorization Request, while the code_verifier must be sent with the Token Request, allowing our backend to make sure both requests are issued by the same source. code_verifier MUST contain only the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. code_challenge can then be obtained via this kind of instructions: . var hash = code_verifier.createHash('sha256'); var code_challenge = base64url.encode(hash); . Signing, encrypting and decoding JWTs . Libraries implementing JWT and the JOSE specs JWS, JWE, JWK, and JWA are listed here. For testing purposes only, we could advise the use of https://mkjwk.org/ for JWK generation and https://mkjose.org/ for payload check =&gt; these are 2 open-source tools which will help you visualize JWK mechanisms, client assertion construct. Please DO NOT generate production private keys on any website. Rather opt for the relevant SDK library mentioned here. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#securing-the-exchange-of-information",
    "relUrl": "/confirmation/#securing-the-exchange-of-information"
  },"37": {
    "doc": "Confirmation API",
    "title": "Certificates and website security",
    "content": "itsme® requires https connections to guarantee security. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. All itsme® API URL we publish use https. All requests to our endpoints MUST also use the SNI extension (refer to the RFC for more information) of the TLS protocol, that allows our servers to provide you with the correct certificate based on which endpoint you are querying. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#certificates-and-website-security",
    "relUrl": "/confirmation/#certificates-and-website-security"
  },"38": {
    "doc": "Confirmation API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the application/x-www-form-urlencoded format, or | response displayed directly on our itsme® sign-in page ; | response using the application/json media type | . Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response : . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. So, OpenID Connect defines a number of rules regarding the format of errors returned from our endpoints. Authorization Endpoint errors . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page. If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the application/x-www-form-urlencoded format : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | access_denied | The User or the Authorization Endpoint denied the request. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Endpoint errors . If the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters in the entity-body of the HTTP response using the application/json media type : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . For example : . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Endpoint errors . When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . For example : . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Revocation Endpoint errors . If the request fails the Revoke Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the application/json media type : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | unsupported_token_type | itsme® does not support the revocation of the presented access token. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#handling-responses",
    "relUrl": "/confirmation/#handling-responses"
  },"39": {
    "doc": "Confirmation API",
    "title": "WYSIWYS template",
    "content": "When building your Authorization Request, one of the below template MUST be specified in the claims parameter. Advanced Payment template . | http://itsme.services/v2/claim/claim_approval_template_name | This identifies the template used. It MUST be set to \"http://itsme.services/v2/claim/claim_approval_template_name\":{ \"essential\": true, \"value\": \"adv_payment\" }. | . | http://itsme.services/v2/claim/claim_approval_amount_key | A string holding an integer value inside. This MUST be set to \"http://itsme.services/v2/claim/claim_approval_amount_key\":{ \"essential\": true, \"value\": \"Amount_as_a_string\" }. | . | http://itsme.services/v2/claim/claim_approval_currency_key | A string holding a valid currency code (e.g. “EUR”). This MUST be set to \"http://itsme.services/v2/claim/claim_approval_currency_key\":{ \"essential\": true, \"value\": \"Currency_as_a_string\" }. | . | http://itsme.services/v2/claim/claim_approval_iban_key | A string holding a valid IBAN account number. This MUST be set to \"http://itsme.services/v2/claim/claim_approval_iban_key\":{ \"essential\": true, \"value\": \"IBAN_as_a_string\" }. | . Free Text template . | http://itsme.services/v2/ claim/claim_approval_template_name | This identifies the template used. It MUST be set to \"http://itsme.services/v2/claim/claim_approval_template_name\":{ \"essential\": true, \"value\": \"free_text\" }. | . | http://itsme.services/v2/ claim/claim_approval_text_key | A string holding any text to be displayed in the itsme® app. This MUST be set to\"http://itsme.services/v2/claim/claim_approval_text_key\":{ \"essential\": true, \"value\": \"Text_as_a_string\" }. | . We currently support the following HTML tags in the Free Text template: - &lt; b &gt; - &lt; i &gt; - &lt; u &gt; - &lt; br &gt;. Tags that are not rendered are ignored. The free text template can contain up to 7500 characters. We also only support the following character set: https://en.wikipedia.org/wiki/ISO/IEC_8859-15 . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#wysiwys-template",
    "relUrl": "/confirmation/#wysiwys-template"
  },"40": {
    "doc": "Confirmation API",
    "title": "Mapping the user",
    "content": "Mapping using sub claim . To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. Benefit of sub claim . The benefit of using a sub claim is that it will not change, not even if other user attributes (email, phone number, etc.) associated with that account are updated. Deleting and re-creating an itsme® account . In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#mapping-the-user",
    "relUrl": "/confirmation/#mapping-the-user"
  },"41": {
    "doc": "Confirmation API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#api-reference",
    "relUrl": "/confirmation/#api-reference"
  },"42": {
    "doc": "Confirmation API",
    "title": "itsme® Discovery Document",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#itsme-discovery-document",
    "relUrl": "/confirmation/#itsme-discovery-document"
  },"43": {
    "doc": "Confirmation API",
    "title": "Authorization Request",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . Parameters . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_type REQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scope REQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | service REQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openid REQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profile OPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | email OPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phone OPTIONAL | Returns the phone_number claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eid OPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumber claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | state Strongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonce Strongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_locales OPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | display OPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_values OPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claims OPTIONAL | Allows to request specific user's details (\"claims\"). You can choose to receive those claims either in the ID Token (from /token endpoint) or in the UserInfo object (from /userinfo endpoint).It MUST be a JSON object containing an {\"id_token\":{...}} member or a {\"userinfo\":{...}} member respectively. This member will then contain all the desired claims - see example below.Note: to avoid the need of a /userinfo request, itsme® recommends to retrieve the claims directly from the ID Token.When implementing the Confirmation service, you MUST use a WYSIWYS template to pre-structure the transaction screen in the itsme® app (refer to this section for more information).Supported claims are listed below. | name OPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_name OPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_name OPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdate OPTIONAL | Return user's birthdate, represented as a string in YYYY-MM-DD date format. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate_as_string claim: at least one of the 2 SHALL return a value.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/birthdate_as_string OPTIONAL | Returns user's birthdate in an unprocessed way, as mentioned on the ID document. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | gender OPTIONAL | Returns user's gender. Possible values are : female male unknown n/aBE: A value SHALL always be returned for users with a Belgian ID document. Belgian accounts can only be female or maleNL: A value MAY NOT be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | locale OPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | picture OPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file). This image is the raw (unprocessed) image contained on the ID document.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. Accessing this URL has to be done with your bearer token. Example: GET /v2/picture HTTP/1.1 Host: idp.prd.itsme.services Authorization: Bearer SlAV32hkKG | . | http://itsme.services/v2/claim/physical_person_photo OPTIONAL | Returns user's ID picture, represented as a JSON Object containing these members:format: the MIME typevalue: the base64 encoded image.This picture is read from the ID document but converted to always return a 200x140 px, 24 BPP JPEG image.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | email OPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verified OPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_number OPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verified OPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim.Note: currently, all phone numbers are verified so this claims always returns true. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members: formatted street_address postal_code locality.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_citizenship OPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/claim_citizenship_as_iso OPTIONAL | Returns user's nationality. The format is always ISO 3166-1 alpha-3.BE: Please be aware that this claim is computed by itsme® for users with a Belgian ID document on a best effort basis. For the original value as stored on the ID document, see http://itsme.services/v2/claim/claim_citizenship above. Therefore, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/place_of_birth OPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/BEeidSn OPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens. This claim is made redundant by the IDDocumentSN claim below which we advise to use instead.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_device OPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_info OPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumber OPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityFrom OPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityTo OPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID document. | . | http://itsme.services/v2/claim/verificationDate OPTIONAL | Returns the date when the user's document was read for the last time, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/IDDocumentSN OPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentType OPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/issuance_locality OPTIONAL | Returns the locality that issued the ID document used to create the itsme® account.If requested, a value MAY NOT be returned for this claim. | . | sub OPTIONAL | Allows the user to bypass the itsme® identification page if he is already logged into your application, by using the user's unique identifier key as value (aka. the user's sub value returned in the ID Token response) | . | . | request_uri REQUIRED if no \"request\" | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MUST also be encrypted and more precisely: it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MUST contain the TCP port number 443. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | request REQUIRED if no \"request_uri\" | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MUST also be encrypted and more precisely: it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information). | . | code_challenge OPTIONAL | A challenge derived from the code verifier by applying a S256 hash. This parameter is REQUIRED if you requested PKCE to be enforced. | . | code_challenge_method OPTIONAL | Code verifier transformation method.It MUST be set to S256. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . Parameters . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_type REQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scope REQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | service REQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openid REQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profile OPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | email OPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phone OPTIONAL | Returns the phone_number claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eid OPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumber claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | state Strongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonce Strongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_locales OPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | display OPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_values OPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claims OPTIONAL | Allows to request specific user's details (\"claims\"). You can choose to receive those claims either in the ID Token (from /token endpoint) or in the UserInfo object (from /userinfo endpoint).It MUST be a JSON object containing an {\"id_token\":{...}} member or a {\"userinfo\":{...}} member respectively. This member will then contain all the desired claims together with indication whether the claim is voluntary (returned if available) or essential (flow will stop if unavailable) - see example below.Note: to avoid the need of a /userinfo request, itsme® recommends to retrieve the claims directly from the ID Token.When implementing the Confirmation service, you MUST use a WYSIWYS template to pre-structure the transaction screen in the itsme® app (refer to this section for more information).Supported claims are listed below. | name OPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_name OPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_name OPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdate OPTIONAL | Return user's birthdate, represented as a string in YYYY-MM-DD date format. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate_as_string claim: at least one of the 2 SHALL return a value.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/birthdate_as_string OPTIONAL | Returns user's birthdate in an unprocessed way, as mentioned on the ID document. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate claim: at least one of the 2 SHALL return a value.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | gender OPTIONAL | Returns user's gender. Possible values are : female male unknown n/aBE: A value SHALL always be returned for users with a Belgian ID document. Belgian accounts can only be female or maleNL: A value MAY NOT be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | locale OPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | picture OPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file). This image is the raw (unprocessed) image contained on the ID document.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. Accessing this URL has to be done with your bearer token. Example: GET /v2/picture HTTP/1.1 Host: idp.prd.itsme.services Authorization: Bearer SlAV32hkKG | . | http://itsme.services/v2/claim/physical_person_photo OPTIONAL | Returns user's ID picture, represented as a JSON Object containing these members:format: the MIME typevalue: the base64 encoded image.This picture is read from the ID document but converted to always return a 200x140 px, 24 BPP JPEG image.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | email OPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verified OPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_number OPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verified OPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim.Note: currently, all phone numbers are verified so this claims always returns true. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members: formatted street_address postal_code locality.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_citizenship OPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/claim_citizenship_as_iso OPTIONAL | Returns user's nationality. The format is always ISO 3166-1 alpha-3.BE: Please be aware that this claim is computed by itsme® for users with a Belgian ID document on a best effort basis. For the original value as stored on the ID document, see http://itsme.services/v2/claim/claim_citizenship above. Therefore, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/place_of_birth OPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/BEeidSn OPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens. This claim is made redundant by the IDDocumentSN claim below which we advise to use instead.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_device OPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_info OPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumber OPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityFrom OPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityTo OPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID document. | . | http://itsme.services/v2/claim/verificationDate OPTIONAL | Returns the date when the user's document was read for the last time, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/IDDocumentSN OPTIONAL | Returns the Dutch or Luxembourgish ID card/passport number, represented as a string. (NL doc SN is composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the NL document numbers. The digit ‘0’ (zero) MAY be used.)If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentType OPTIONAL | Returns the Dutch or Luxembourg ID card/passport document type (1 or 2 letters).If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDIssuingCountry OPTIONAL | Returns the 3-letters iso code of the country that issued the identity document.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/issuance_locality OPTIONAL | Returns the locality that issued the ID document used to create the itsme® account.If requested, a value MAY NOT be returned for this claim. | . | sub OPTIONAL | Allows the user to bypass the itsme® identification page if already logged into your application, by using the user's unique identifier key as value (aka. the user's sub value returned in a previous Token response). Please, use the following syntax: \"sub\":{\"value\":\"YOUR_SUB\"} | &lt;/tr&gt; | . | request_uri REQUIRED if no \"request\" | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | request REQUIRED if no \"request_uri\" | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information). | . | code_challenge OPTIONAL | A challenge derived from the code verifier by applying a S256 hash. This parameter is REQUIRED if you requested PKCE to be enforced. | . | code_challenge_method OPTIONAL | Code verifier transformation method.It MUST be set to S256. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | Public- and private-key | Secret key | . | Request . GET /v2/authorization HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=OIDC_TEST1 &amp;redirect_uri=https://client.example.org/cb &amp;scope=openid+service:EXAMPLE+profile+phone+email+address+eid &amp;state=anystate &amp;nonce=anonce &amp;prompt=login+consent &amp;max_age=1 &amp;request_uri=https://client.example.org/RequestObject.json . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=anystate . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=OIDC_TEST1 &amp;redirect_uri=https://client.example.org/cb &amp;scope=openid+service:EXAMPLE+profile+phone+email+address+eid &amp;state=anystate &amp;nonce=anonce &amp;prompt=login+consent &amp;max_age=1 &amp;request_uri=https://client.example.org/RequestObject.json . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=anystate . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#authorization-request",
    "relUrl": "/confirmation/#authorization-request"
  },"44": {
    "doc": "Confirmation API",
    "title": "Token Request",
    "content": ". | Public- and private-key | Secret key | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the public- and private-key pair method. The parameters below must be included in the body of the POST request, not in the query string. Parameters . | grant_type REQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID token and access token. | . | code REQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | code_verifier OPTIONAL | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. This parameter is REQUIRED if you required PKCE to be enforced. | . | client_assertion_type REQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertion REQUIRED | Is a set of identity and security information, in the form of a JWT, used as an authentication method. To ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code, the JWT MUST be signed, and MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The JWT contains the following claims. | iss REQUIRED | The issuer of the token. This value MUST be the same as the client_id. | . | sub REQUIRED | The subject of the token. This value MUST be the same as the client_id. | . | aud REQUIRED | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jti REQUIRED | An unique identifier for the token, containing maximum 255 characters. | . | exp REQUIRED | The expiration time of the token in seconds since January 1, 1970 UTC. | . | iat OPTIONAL | The time at which the JWT was issued. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this page for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. The parameters below must be included in the body of the POST request, not in the query string. Parameters . | grant_type REQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | code REQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secret REQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . | code_verifier OPTIONAL | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. This parameter is REQUIRED if you required PKCE to be enforced. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this page for more information). | . | . Example . | Public- and private-key | Secret key | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#token-request",
    "relUrl": "/confirmation/#token-request"
  },"45": {
    "doc": "Confirmation API",
    "title": "UserInfo Request",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this page for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this page for more information). | . Example . Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . This is an response example containing all possible claims for a Belgian account: . HTTP/1.1 200 OK Content-Type: application/json { \"http://itsme.services/v2/claim/validityFrom\": { \"http://itsme.services/v2/claim/BEeidSn\": \"2018-11-08T00:00:00Z\" }, \"sub\": \"e3xad7upx64grm14ttpnx4c586ve8gy0gp38\", \"birthdate\": \"1978-11-01\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"BEL\", \"gender\": \"male\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"01.11.1978\", \"http://itsme.services/v2/claim/IDDocumentType\": \"I\", \"iss\": \"https://oidc.uat.itsme.services/clientsecret-oidc/csapi/v0.1\", \"http://itsme.services/v2/claim/validityTo\": { \"http://itsme.services/v2/claim/BEeidSn\": \"2028-11-10T00:00:00Z\" }, \"http://itsme.services/v2/claim/claim_citizenship\": \"BE\", \"locale\": \"FR\", \"http://itsme.services/v2/claim/issuance_locality\": { \"http://itsme.services/v2/claim/BEeidSn\": \"BRUXELLES\" }, \"email\": \"test@itsme.be\", \"http://itsme.services/v2/claim/place_of_birth\": { \"city\": \"Brussels\", \"formatted\": \"Brussels\" }, \"address\": { \"locality\": \"TONGEREN\", \"street_address\": \"Jekerstraat 39\", \"postal_code\": \"3700\", \"formatted\": \"Jekerstraat 39 3700 TONGEREN\" }, \"email_verified\": false, \"http://itsme.services/v2/claim/claim_device\": { \"os\": \"ANDROID\", \"appName\": \"be.bmid.itsme.uat\", \"appRelease\": \"4.0.0\", \"deviceLabel\": \"lucye\", \"debugEnabled\": false, \"deviceId\": \"c22de2331dd249bba063afd3507fe3a4f\", \"osRelease\": \"9\", \"manufacturer\": \"LGE\", \"deviceLockLevel\": \"true\", \"rooted\": false, \"deviceModel\": \"LG-H870\", \"msisdn\": \"0032485694175\" }, \"http://itsme.services/v2/claim/BENationalNumber\": \"99060427181\", \"phone_number_verified\": true, \"given_name\": \"George\", \"picture\": \"https://oidc.uat.itsme.services/clientsecret-oidc/csapi/v0.1/picture\", \"http://itsme.services/v2/claim/verificationDate\": { \"http://itsme.services/v2/claim/place_of_birth\": \"2023-04-12T15:02:23Z\", \"birthdate\": \"2023-04-12T15:02:23Z\", \"address\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"2023-04-12T15:02:23Z\", \"gender\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/BENationalNumber\": \"2023-04-12T15:02:23Z\", \"given_name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/claim_citizenship\": \"2023-04-12T15:02:23Z\", \"picture\": \"2023-04-12T15:02:23Z\", \"name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/BEeidSn\": \"2023-04-12T15:02:23Z\", \"family_name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/physical_person_photo\": \"2023-04-12T15:02:23Z\" }, \"aud\": \"WXw9DMqkEv\", \"http://itsme.services/v2/claim/IDIssuingCountry\": { \"http://itsme.services/v2/claim/place_of_birth\": \"BEL\", \"birthdate\": \"BEL\", \"address\": \"BEL\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"BEL\", \"gender\": \"BEL\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"BEL\", \"http://itsme.services/v2/claim/BENationalNumber\": \"BEL\", \"given_name\": \"BEL\", \"http://itsme.services/v2/claim/claim_citizenship\": \"BEL\", \"picture\": \"BEL\", \"name\": \"BEL\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"BEL\", \"http://itsme.services/v2/claim/BEeidSn\": \"BEL\", \"family_name\": \"BEL\", \"http://itsme.services/v2/claim/physical_person_photo\": \"BEL\" }, \"name\": \"George Tǎnka\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"431522485012\", \"phone_number\": \"+32 485694175\", \"http://itsme.services/v2/claim/BEeidSn\": \"431522485012\", \"family_name\": \"Tǎnka\", \"http://itsme.services/v2/claim/physical_person_photo\": { \"format\": \"image/jpeg\", \"value\": \"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\" }, \"nbf\": 1681314190, \"exp\": 1681314490, \"iat\": 1681314190 } . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#userinfo-request",
    "relUrl": "/confirmation/#userinfo-request"
  },"46": {
    "doc": "Confirmation API",
    "title": "Revoke Request",
    "content": ". | Public- and private-key | Secret key | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | token REQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hint OPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | . Example . | Public- and private-key | Secret key | . | Not applicable. | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | . ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/#revoke-request",
    "relUrl": "/confirmation/#revoke-request"
  },"47": {
    "doc": "Confirmation API",
    "title": "Confirmation API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/confirmation/",
    "relUrl": "/confirmation/"
  },"48": {
    "doc": "Identification API",
    "title": "Overview",
    "content": "itsme® API is based on the Authorization Code Flow of OpenID Connect 1.0. The API can be used to verify the end-users’ identity and obtain basic profile information about gien end-users. The diagram below describes the Identification process and how your systems should integrate with itsme® : . To get to this result please make sure you . | add itsme® button to your front-end page so the user can indicate he wishes to authenticate with itsme® : itsme® button specifications. | create the Authorization Request to authenticate the User. This request will redirect the user to the itsme® app. itsme® will then authenticates the user by asking him . | to enter his phone number on the itsme® sign-in page | authorize the release of some information to your application | to provide his credentials (itsme® code, fingerprint or FaceID) | . It is also in this Authorization Request that you will be able to request claims about the user and the Identification event. | collect the Authorization Code once the user has been authenticated and redirected by itsme® to your mobile or web application. | exchange the Authorization Code for an ID token (e.g. identifying the user) and an Access Token. | Obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint if the required claims are not returned in the ID token. | Confirm the success of the operation and display a success message. | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#overview",
    "relUrl": "/identification/#overview"
  },"49": {
    "doc": "Identification API",
    "title": "Guides",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/identification/#guides",
    "relUrl": "/identification/#guides"
  },"50": {
    "doc": "Identification API",
    "title": "Generate itsme® button",
    "content": "First, you will need to create a button to allow your users to authenticate with itsme®. Check the Button design guide before you start the integration. Upon clicking this button, the user will be redirected to our Front-End. itsme® then take care of their identification. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#generate-itsme-button",
    "relUrl": "/identification/#generate-itsme-button"
  },"51": {
    "doc": "Identification API",
    "title": "Securing the exchange of information",
    "content": "To protect the exchange of sensitive information and ensure the requested information gets issued to a legitimate application and not some other party, the OpenID Connect protocol uses JSON Web Token (JWT) which can be signed and/or encrypted. Among the methods described in OpenID specification, itsme® supports 2 authentication methods to secure communications between your backend and itsme®: . | \"Private key JWT\" is based on a public/private key pair (asymmetric encryption). It is therefore the most secure option | \"Client secret\" is based on a shared Secret key (symmetric encryption). It can be easier to implement in some cases | . You will have to choose between one of these methods when registering your project. Public-private key pair and JWKSet URI . This method uses a pair of keys (1 public, 1 private) to encrypt and decrypt senders’ and recipients’ sensitive data. It is also known as public-key cryptography or asymetric encryption. This method requires that each party exposes its public keys in the form of a JWK Set document on a publicly accessible URI, and keep its private keys for itself. You can retrieve the itsme® JWK Set from the URI mentioned as jwks_uri in our itsme® Discovery document. Refer to this page for more on signing and encrypting tokens. Whatever the tool you are choosing to create your key pairs, don't forget to send your JWK Set URI by email to onboarding@itsme-id.com and itsme® will make sure to complete the configuration for you in no time! The algorithms – needed to sign and encrypt a JWT – are listed in the itsme® Discovery document for more information. Secret key method . Secret key cryptography method uses the same secret key to encrypt and decrypt sensitive information. This approach is the inverse of public- and private-key encryption. This method requires the exchange of a static secret to be held by both the sender and the data receiver. The secret value will be provided by itsme® when registering your project. The algorithms – needed to sign and encrypt a JWT – are listed in the itsme® Discovery document for more information. If you choose to go with the secret key method, you will be able to specify if the ID Token JWT needs to be signed with the an asymmetric algorithm (e.g. RS256) or with a symmetric algorithm (e.g. : HS256). When using the RS256 algorithm, our public keys will be needed to verify the signature. This information can be found in our itsme® Discovery document, using the key jwks_uri. PKCE-enhanced flow . Whatever the chosen authentication method, itsme® also supports an extra security extension named Proof of Key for Code Exchange (PKCE). This additionnal layer of security is intended to mitigate some Authorization Code interception attacks. For this mechanism to achieve its full potential, PKCE has to be made mandatory in your flow, which is an option we can enable for you (strongly recommended). Please ask our onboarding team to do so when registering your project. If this option is not enabled, you are still free to use PKCE for some added security but requests without the PKCE code_challenge will be accepted as well at itsme® side. PKCE implies choosing a random string, named code_verifier, and then generating a SHA256 hash of that string, named code_challenge. The code_challenge has to be sent along with the Authorization Request, while the code_verifier must be sent with the Token Request, allowing our backend to make sure both requests are issued by the same source. code_verifier MUST contain only the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. code_challenge can then be obtained via this kind of instructions: . var hash = code_verifier.createHash('sha256'); var code_challenge = base64url.encode(hash); . Signing, encrypting and decoding JWTs . Libraries implementing JWT and the JOSE specs JWS, JWE, JWK, and JWA are listed here. For testing purposes only, we could advise the use of https://mkjwk.org/ for JWK generation and https://mkjose.org/ for payload check =&gt; these are 2 open-source tools which will help you visualize JWK mechanisms, client assertion construct. Please DO NOT generate production private keys on any website. Rather opt for the relevant SDK library mentioned here. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#securing-the-exchange-of-information",
    "relUrl": "/identification/#securing-the-exchange-of-information"
  },"52": {
    "doc": "Identification API",
    "title": "Certificates and website security",
    "content": "itsme® requires https connections to guarantee security. With the https protocol, a web site operator obtains a certificate by applying to a certificate authority with a certificate signing request. The certificate request is an electronic document that contains the web site name, company information and the public key. The certificate provider signs the request, thus producing a public certificate. During web browsing, this public certificate is served to any web browser that connects to the web site and proves to the web browser that the provider believes it has issued a certificate to the owner of the web site. A certificate provider can opt to issue three types of certificates, each requiring its own degree of vetting rigor. In order of increasing rigor (and naturally, cost) they are: Domain Validation, Organization Validation and Extended Validation. The Domain Validation certificate doesn’t provide sufficient identity guarantees to itsme. So, only the Organization Validation and Extended Validation certificates are supported. For example, using the Let’s Encrypt open certificate authority is not suffcient because it only provide standard Domain Validation certificates. The chain of trust of these certificates need to be publicly accessible, meaning that our systems need to be able to access the root and the intermediate certificates. All itsme® API URL we publish use https. All requests to our endpoints MUST also use the SNI extension (refer to the RFC for more information) of the TLS protocol, that allows our servers to provide you with the correct certificate based on which endpoint you are querying. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#certificates-and-website-security",
    "relUrl": "/identification/#certificates-and-website-security"
  },"53": {
    "doc": "Identification API",
    "title": "Handling responses",
    "content": "Whenever a partner is sending a request to the itsme OIDC endpoints he will get a response back. According to the OIDC protocol, and depending on the endpoint that was contacted, partners can get a . | response where some parameters are added to the query component of the redirection URI using the application/x-www-form-urlencoded format, or | response displayed directly on our itsme® sign-in page ; | response using the application/json media type | . Alongside the type of response an HTTP status code is sent that shows whether the request was successful or not. If it was not, you can tell by the code and the message in the response what went wrong, why it went wrong and whether there is something the partner can do about it. A successful response . An HTTP status 200 OK or 302 Found is issued whenever your request was a success. You see this type of response in our examples like the one where we successfully retrieve the Token Response : . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . The error responses . Things will sometimes go wrong. So, OpenID Connect defines a number of rules regarding the format of errors returned from our endpoints. Authorization Endpoint errors . If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid,… the Authorization Endpoint will inform you of the error our itsme® sign-in page. If the User denies the access request or the User authentication fails, the Authorization Endpoint will inform you by adding the following parameters to the query component of the redirection URI using the application/x-www-form-urlencoded format : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. | . | access_denied | The User or the Authorization Endpoint denied the request. | . | login_required | The Authorization Endpoint requires User authentication. This error MAY be returned when the prompt parameter value in the Authorization Request is none | . | interaction_required | The Authorization Endpoint requires User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authorization Request is none, but the Autorization Request cannot be completed without displaying a user interface for User interaction. | . | unsupported_request | The request contains a not supported parameter. | . | invalid_client_id | The request contains an invalid client_id. | . | invalid_redirect_uri | The request contains an invalid redirect URI. | . | unsupported_grant_type | Grant type not supported. | . | invalid_grant | Invalid grant. | . | invalid_scope | The requested scope is invalid, unknown, or malformed. | . | unsupported_display | Only page is supported. | . | unauthorized_client | Unknown or unspecified client_id. | . | unsupported_response_type | The Authorization Endpoint does not support obtaining an authorization code using this method. | . | invalid_request_object | The request parameter contains an invalid Request Object. | . | invalid_request_uri | The request_uri in the Authorization Request returns an error or contains invalid data. | . | invalid_request | Oauth2 parameters do not match Request object. | . | temporary_unavailable | The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example : . HTTP/1.1 302 Found Location: https://client.example.com/cb?error=access_denied&amp;state=xyz . Token Endpoint errors . If the request fails the Token Endpoint responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters in the entity-body of the HTTP response using the application/json media type : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . For example : . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . UserInfo Endpoint errors . When a request fails, the UserInfo Endpoint responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes specific error codes in the response. | invalid_request | The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. | . | invalid_token | The access token provided is expired, revoked, malformed, or invalid for other reasons. | . For example : . HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\" . Revocation Endpoint errors . If the request fails the Revoke Endpoint responds with an HTTP 400 (Bad Request) status code and includes the fllowing parameters in the entity-body of the HTTP response using the application/json media type : . | error REQUIRED | A single ASCII error code. | invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. | . | invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). | . | invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) is invalid, expired or does not match the redirection URI used in the authorization request. | . | unauthorized_client | The authenticated client is not authorized to use this authorization grant type. | . | unsupported_token_type | itsme® does not support the revocation of the presented access token. | . | . | error_description OPTIONAL | Human-readable text providing additional information, used to assist the developer in understanding the error that occurred. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . For example: . HTTP/1.1 400 Bad Request Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { \"error\":\"invalid_request\" } . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#handling-responses",
    "relUrl": "/identification/#handling-responses"
  },"54": {
    "doc": "Identification API",
    "title": "Mapping the user",
    "content": "Mapping using sub claim . To sign in successfully in your web desktop, mobile web or mobile application, a given user must be mapped to a user account in your database. By default, your application Server will use the subject identifier, or sub claim, in the ID Token to identify and verify a user account. The sub claim is a string that uniquely identifies a given user account. The benefit of using a sub claim is that it will not change, even if other user attributes (email, phone number, etc) associated with that account are updated. If no user record is storing the sub claim value, then you should allow the user to associate his new or existing account to the sub. Benefit of sub claim . The benefit of using a sub claim is that it will not change, not even if other user attributes (email, phone number, etc.) associated with that account are updated. Deleting and re-creating an itsme® account . In a limited number of cases (e.g. technical issue,…) a user could ask itsme® to ‘delete’ his account. As a result the specific account will be ‘archived’ (for compliancy reasons) and thus also the unique identifier(s) (e.g. “sub”). If the same user would opt to re-create an itsme® afterwards, he will need to re-bind his itsme® account with your application server, in the same way as for the initial binding. After successful re-binding you will need to overwrite the initial reference with the new sub claim value in your database. ",
    "url": "https://belgianmobileid.github.io/doc/identification/#mapping-the-user",
    "relUrl": "/identification/#mapping-the-user"
  },"55": {
    "doc": "Identification API",
    "title": "API reference",
    "content": ". ",
    "url": "https://belgianmobileid.github.io/doc/identification/#api-reference",
    "relUrl": "/identification/#api-reference"
  },"56": {
    "doc": "Identification API",
    "title": "itsme® Discovery Document",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/.well-known/openid-configuration . To simplify implementations and increase flexibility, OpenID Connect allows the use of a Discovery Document, a JSON document containing key-value pairs which provide details about itsme® configuration, such as the . Authorization, Token and userInfo Endpoints Supported claims ... | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#itsme-discovery-document",
    "relUrl": "/identification/#itsme-discovery-document"
  },"57": {
    "doc": "Identification API",
    "title": "Authorization Request",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/authorization . When implementing the Identification service, you MUST request at least one user claim, either via the scope parameter - profile, email, address ... - or via the claims parameter - name, birthdate, http://itsme.services/v2/claim/claim_citizenship ... Parameters . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_type REQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scope REQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | service REQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openid REQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profile OPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | email OPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phone OPTIONAL | Returns the phone_number claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eid OPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumber claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | state Strongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonce Strongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_locales OPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | display OPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_values OPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claims OPTIONAL | Allows to request specific user's details (\"claims\"). You can choose to receive those claims either in the ID Token (from /token endpoint) or in the UserInfo object (from /userinfo endpoint).It MUST be a JSON object containing an {\"id_token\":{...}} member or a {\"userinfo\":{...}} member respectively. This member will then contain all the desired claims - see example below.Note: to avoid the need of a /userinfo request, itsme® recommends to retrieve the claims directly from the ID Token.Supported claims are listed below. | name OPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_name OPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_name OPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdate OPTIONAL | Return user's birthdate, represented as a string in YYYY-MM-DD date format. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate_as_string claim: at least one of the 2 SHALL return a value.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/birthdate_as_string OPTIONAL | Returns user's birthdate in an unprocessed way, as mentioned on the ID document. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate claim: at least one of the 2 SHALL return a value.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | gender OPTIONAL | Returns user's gender. Possible values are : female male unknown n/aBE: A value SHALL always be returned for users with a Belgian ID document. Belgian accounts can only be female or maleNL: A value MAY NOT be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | locale OPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | picture OPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file). This image is the raw (unprocessed) image contained on the ID document.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. Accessing this URL has to be done with your bearer token. Example: GET /v2/picture HTTP/1.1 Host: idp.prd.itsme.services Authorization: Bearer SlAV32hkKG | . | http://itsme.services/v2/claim/physical_person_photo OPTIONAL | Returns user's ID picture, represented as a JSON Object containing these members:format: the MIME typevalue: the base64 encoded image.This picture is read from the ID document but converted to always return a 200x140 px, 24 BPP JPEG image.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | email OPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verified OPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_number OPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verified OPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim.Note: currently, all phone numbers are verified so this claims always returns true. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members: formatted street_address postal_code locality.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_citizenship OPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/claim_citizenship_as_iso OPTIONAL | Returns user's nationality. The format is always ISO 3166-1 alpha-3.BE: Please be aware that this claim is computed by itsme® for users with a Belgian ID document on a best effort basis. For the original value as stored on the ID document, see http://itsme.services/v2/claim/claim_citizenship above. Therefore, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/place_of_birth OPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/BEeidSn OPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens. This claim is made redundant by the IDDocumentSN claim below which we advise to use instead.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_device OPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_info OPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumber OPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityFrom OPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityTo OPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID document. | . | http://itsme.services/v2/claim/verificationDate OPTIONAL | Returns the date when the user's document was read for the last time, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/IDDocumentSN OPTIONAL | Returns the Dutch ID card/passport number, represented as a string composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the document numbers. The digit ‘0’ (zero) MAY be used.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentType OPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/issuance_locality OPTIONAL | Returns the locality that issued the ID document used to create the itsme® account.If requested, a value MAY NOT be returned for this claim. | . | . | request_uri OPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MUST also be encrypted and more precisely: it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MUST contain the TCP port number 443. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | request OPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MUST also be encrypted and more precisely: it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information). | . | code_challenge OPTIONAL | A challenge derived from the code verifier by applying a S256 hash. This parameter is REQUIRED if you requested PKCE to be enforced. | . | code_challenge_method OPTIONAL | Code verifier transformation method.It MUST be set to S256. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/authorize . When implementing the Identification service, you MUST at least specify one user claim in the scope parameter - profile email address ... - or in the claims parameter - name birthdatehttp://itsme.services/v2/claim/claim_citizenship. Parameters . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | response_type REQUIRED | This defines the processing flow to be used when forming the response. Because itsme® supports the Authorization Code Flow, this value MUST be code. | . | scope REQUIRED | It allows your application to express the desired scope of the access request. Each scope returns a set of user attributes. The scopes an application should request depend on which user attributes your application needs. Once the user authorizes the requested scopes, his details are returned in an ID Token and are also available through the UserInfo Endpoint.All scope values must be space-separated.The basic (and required) scopes are openid and service. Beyond that, your application can ask for additional standard scopes values which map to sets of related claims are: profile email address phone eid | service REQUIRED | It indicates the itsme® service your application intends to use, e.g. service:TEST_code by replacing \"TEST_code\" with the service code generated during registration. | . | openid REQUIRED | It indicates that your application intends to use the OpenID Connect protocol to verify a user's identity by returning a sub claim which represents a unique identifier for the authenticated user. | . | profile OPTIONAL | Returns claims that represent basic profile information, specifically family_name, given_name, name, gender, locale, picture and birthdate.If requested, a value SHALL always be returned for the above claims except for the given_name claim which MAY NOT be returned if the user doesn't have any first name(s). | . | email OPTIONAL | Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.If requested, a value SHALL always be returned for the email_verified claim only if email claim is filled with a value, whereas the email claim SHALL always be returned only if the user gave us an email address. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members formatted street_address postal_code localityIf requested, a value SHALL always be returned for users with a Belgian ID document, and SHALL NOT be returned for users with a Dutch ID documents. | . | phone OPTIONAL | Returns the phone_number claim, which contains the user's phone number, and phone_number_verified, which is a boolean indicating whether the phone number was verified by the user.If requested, a value SHALL always be returned for the above claims. | . | eid OPTIONAL | Returns the http://itsme.services/v2/claim/BENationalNumber claim, which contains the unique identification number of natural persons who are registered in Belgium, and http://itsme.services/v2/claim/BEeidSn, which is a string indicating the Belgian ID card number.If requested, a value SHALL always be returned for the above claims. | . | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. The following restrictions apply to redirect URIs: The redirect URI MUST match the value preregistered during the registration. The redirect URI MUST begin with the scheme https (refer to this section for more information). There is an exception for localhost redirect URIs that are only permitted for development purposes, it’s not for use in production. The redirect URI SHALL NOT be a custom URL. The fragment identifier introduced by a hash mark # SHALL NOT be used. The redirect URI is case-sensitive. Its case MUST match the case of the URL path of your running application. For example, if your application includes as part of its path .../abc/response-oidc, do not specify .../ABC/response-oidc in the redirect URI. Because the web browser treats paths as case-sensitive, cookies associated with .../abc/response-oidc MAY be excluded if redirected to the case-mismatched .../ABC/response-oidc URL. If relevant (in case you have a mobile app) make sure that your redirect URIs support the Universal links and App links mechanism. Functionally, it will allow you to have only one single link that will either open your desktop web application, your mobile app or your mobile site on the User’s device. Universal links and App links are standard web links (http://mydomain.com) that point to both a web page and a piece of content inside an app. When a Universal Link is opened, the app OS checks to see if any installed app is registered for that domain. If so, the app is launched immediately without ever loading the web page. If not, the web URL is loaded into the webbrowser. | . | state Strongly RECOMMENDED | Specifies any string value that your application uses to maintain state between your Authorization Request and the Authorization Server's response. You can use this parameter for several purposes, such as directing the user to the correct resource in your application and mitigating cross-site request forgery. | . | nonce Strongly RECOMMENDED | A string value used to associate a session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. | . | ui_locales OPTIONAL | Indicates the user's preferred languages for the itsme® sign-in page, represented as a space-separated list of language tag values, ordered by preference.Possible values : fr nl de en | . | display OPTIONAL | Specify how the itsme® sign-in page should be displayed to the user. If set to touch, it SHOULD displays the itsme® sign-in page with a device that leverages a touch interface. If set to page, the itsme® sign-in UI SHOULD be consistent with a full page view of the User-Agent. If the display parameter is not specified, this is the default display mode. | . | acr_values OPTIONAL | Indicates the authentication method required to process the request, represented as a space-separated list of tag values, ordered by preference.Possible values : http://itsme.services/v2/claim/acr_basic http://itsme.services/v2/claim/acr_advancedNote : if these two values are provided only the most constraining authentication method will be applied, e.g. http://itsme.services/v2/claim/acr_advanced. | http://itsme.services/v2/claim/acr_basic | It lets the user to choose either fingerprint usage (if device is compatible) or itsme® code. If the acr_values parameter is not specified, this is the default authentication method. | . | http://itsme.services/v2/claim/acr_advanced | It forces the user to use his itsme® code. | . | . | claims OPTIONAL | Allows to request specific user's details (\"claims\"). You can choose to receive those claims either in the ID Token (from /token endpoint) or in the UserInfo object (from /userinfo endpoint).It MUST be a JSON object containing an {\"id_token\":{...}} member or a {\"userinfo\":{...}} member respectively. This member will then contain all the desired claims - see example below.Note: to avoid the need of a /userinfo request, itsme® recommends to retrieve the claims directly from the ID Token.Supported claims are listed below. | name OPTIONAL | Returns user's full name in displayable form including all name parts, possibly including titles and suffixes.If requested, a value SHALL always be returned for this claim. | . | given_name OPTIONAL | Returns user's given name(s) or first name(s). Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.If requested, a value MAY NOT be returned if the user doesn't have any first name(s). | . | family_name OPTIONAL | Returns user's surname(s) or last name(s). Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.If requested, a value SHALL always be returned for this claim. | . | birthdate OPTIONAL | Return user's birthdate, represented as a string in YYYY-MM-DD date format. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate_as_string claim: at least one of the 2 SHALL return a value.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/birthdate_as_string OPTIONAL | Returns user's birthdate in an unprocessed way, as mentioned on the ID document. itsme® users are always 16 years old or more.BE: If requested, a value MAY NOT be returned for users with a Belgian ID document. It forms a pair with the birthdate claim: at least one of the 2 SHALL return a value.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | gender OPTIONAL | Returns user's gender. Possible values are : female male unknown n/aBE: A value SHALL always be returned for users with a Belgian ID document. Belgian accounts can only be female or maleNL: A value MAY NOT be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | locale OPTIONAL | Returns user's mobile phone language, represented as a string format. Possible values are : NL FR DE ENIf requested, a value MAY NOT be returned for this claim. | . | picture OPTIONAL | Returns user's ID picture, represented as a URL string. This URL refers to an image file (for example, a JPEG, JPEG2000, or PNG image file). This image is the raw (unprocessed) image contained on the ID document.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. Accessing this URL has to be done with your bearer token. Example: GET /v2/picture HTTP/1.1 Host: idp.prd.itsme.services Authorization: Bearer SlAV32hkKG | . | http://itsme.services/v2/claim/physical_person_photo OPTIONAL | Returns user's ID picture, represented as a JSON Object containing these members:format: the MIME typevalue: the base64 encoded image.This picture is read from the ID document but converted to always return a 200x140 px, 24 BPP JPEG image.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | email OPTIONAL | Returns user's email address.If requested, a value MAY NOT be returned if the user doesn't gave us an email address. | . | email_verified OPTIONAL | Returns true if the user's e-mail address is verified; otherwise false.Note : currently, itsme® always returns false for this claim because the email verification feature is not yet implemented in our systems.If requested, a value SHALL NOT be returned if the email claim is not filled with a value. | . | phone_number OPTIONAL | Returns user's phone number, represented as a string format. For example : [+][country code] [subscriber number including area code].If requested, a value SHALL always be returned for this claim. | . | phone_number_verified OPTIONAL | Returns true if the user's phone number is verified; otherwise false.If requested, a value SHALL always be returned for this claim.Note: currently, all phone numbers are verified so this claims always returns true. | . | address OPTIONAL | Returns user's postal address, represented as JSON Object containing some or all of these members: formatted street_address postal_code locality.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_citizenship OPTIONAL | Returns user's nationality. The format is directly depending on the underlying ID document: for Belgian ID documents this is represented as a string, and for Dutch ID documents this is represented in the ISO 3166-1 alpha-3 format.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/claim_citizenship_as_iso OPTIONAL | Returns user's nationality. The format is always ISO 3166-1 alpha-3.BE: Please be aware that this claim is computed by itsme® for users with a Belgian ID document on a best effort basis. For the original value as stored on the ID document, see http://itsme.services/v2/claim/claim_citizenship above. Therefore, a value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/place_of_birth OPTIONAL | Returns user's place of birth, represented as a JSON Object containing some or all of these members formatted city country.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/BEeidSn OPTIONAL | Returns user's Belgian ID document number, represented as a string with 12 digits in the form xxx-xxxxxxx-yy. (the check-number yy is the remainder of the division of xxxxxxxxxx by 97) for Belgian citizens, or starting with a letter and nine digits in the form B xxxxxxx xx for EU/EEA/Swiss citizens. This claim is made redundant by the IDDocumentSN claim below which we advise to use instead.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/claim_device OPTIONAL | Returns user's phone information, represented as a JSON Object containing some or all of these members os appName appRelease deviceLabel debugEnabled deviceID osRelease manufacturer deviceLockLevel smsEnabled rooted msisdn deviceModel sdkRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/transaction_info OPTIONAL | Returns information about the itsme® transaction, represented as a JSON Object containing some or all of these members securityLevel bindLevel appRelease.If requested, a value MAY NOT be returned for this claim. | . | http://itsme.services/v2/claim/BENationalNumber OPTIONAL | Returns user's Belgian unique identification number, represented as a string with 11 digits in the form YY.MM.DD-xxx.cd where YY.MM.DD is the birthdate of the person, xxx a sequential number (odd for males and even for females) and cd a check-digit. Some exceptions could apply.BE: A value SHALL always be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityFrom OPTIONAL | Returns user's Belgian ID document issuance date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL NOT be returned for users with a Dutch ID document.LU: A value SHALL NOT be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/validityTo OPTIONAL | Returns user's Belgian ID card expiry date, represented as a string in YYYY-MM-DDThh:mm:ss.nnnZ date format specified by ISO 8601. Can only be returned in combination with claim http://itsme.services/v2/claim/BEeidSn.If requested, a value MAY NOT be returned for users with a Belgian ID document, and MAY NOT be returned for users with a Dutch ID document. | . | http://itsme.services/v2/claim/verificationDate OPTIONAL | Returns the date when the user's document was read for the last time, represented as a string in YYYY-MM-DDThh:mm:ss date format specified by ISO 8601.BE: A value MAY NOT be returned for users with a Belgian ID document.NL: A value SHALL always be returned for users with a Dutch ID document.LU: A value SHALL always be returned for users with a Luxembourgish ID document. | . | http://itsme.services/v2/claim/IDDocumentSN OPTIONAL | Returns the Dutch or Luxembourgish ID card/passport number, represented as a string. (NL doc SN is composed of letters at positions 1 and 2 ; letters or digits from positions 3-8: ; and a digit at position 9. The letter ‘O’ is not used in the NL document numbers. The digit ‘0’ (zero) MAY be used.)If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDDocumentType OPTIONAL | Returns the Dutch ID card/passport document type.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/IDIssuingCountry OPTIONAL | Returns the 3-letters iso code of the country that issued the identity document.If requested, a value SHALL always be returned for this claim. | . | http://itsme.services/v2/claim/issuance_locality OPTIONAL | Returns the locality that issued the ID document used to create the itsme® account.If requested, a value MAY NOT be returned for this claim. | . | . | request_uri OPTIONAL | A URL using the https scheme referencing a resource containing a JWT whose claims are the request parameters. The request_uri parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request_uri parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The following restrictions apply to request URIs: The request URI MUST be preregistered during the registration. The request URI MAY contain any TCP port number. Example : https://test.istme.be:443/p/test The request URI MUST begin with the scheme https (refer to this section for more information). The usage of localhost request URIs that are not permitted. The request URI JWT MUST be publicly accessible. | . | request OPTIONAL | It represents the request as a JWT whose Claims are the request parameters. The request parameter is used to secure parameters in the Authorization Request from tainting or inspection when sending the request to the itsme® Authorization Endpoint.If the request parameter is used, the JWT MUST be signed and MUST contain the claims iss (issuer) and aud (audience) as members. The iss value SHOULD be your client_id. The aud value SHOULD be set to https://idp.[e2e/prd].itsme.services/v2/authorization. The JWT MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information). | . | code_challenge OPTIONAL | A challenge derived from the code verifier by applying a S256 hash. This parameter is REQUIRED if you requested PKCE to be enforced. | . | code_challenge_method OPTIONAL | Code verifier transformation method.It MUST be set to S256. | . Response . 302 application/x-www-form-urlencoded . | code | An intermediate opaque credential of 36 characters used to retrieve the ID Token and Access Token.Note : the code has a lifetime of 3 minutes. | . | state | The string value provided in the Authorization Request. You SHOULD validate that the value returned matches the one supplied. | . | . Example . | Public- and private-key | Secret key | . | Request . GET /v2/authorization HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=abcd1234 &amp;redirect_uri=https://client.example.org/cb &amp;scope=openid+service:EXAMPLE+profile+eid+phone+email+address &amp;state=anystate &amp;nonce=anonce &amp;prompt=login &amp;max_age=1 &amp;claims={\"id_token\":{ \"name\":null, \"gender\":null, \"http://itsme.services/v2/claim/BENationalNumber\":null, \"http://itsme.services/v2/claim/claim_citizenship\":null, \"http://itsme.services/v2/claim/place_of_birth\":null, \"http://itsme.services/v2/claim/physical_person_photo\":null, \"http://itsme.services/v2/claim/birthdate_as_string\":null, \"http://itsme.services/v2/claim/validityFrom\":null, \"http://itsme.services/v2/claim/validityTo\":null, \"http://itsme.services/v2/claim/IDDocumentSN\":null}} . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | Request . GET /authorize HTTP/1.1 Host: server.example.com response_type=code &amp;client_id=abcd1234 &amp;redirect_uri=https://client.example.org/cb &amp;scope=openid+service:EXAMPLE+profile+eid+phone+email+address &amp;state=anystate &amp;nonce=anonce &amp;prompt=login &amp;max_age=1 &amp;claims={\"id_token\":{ \"name\":null, \"gender\":null, \"http://itsme.services/v2/claim/BENationalNumber\":null, \"http://itsme.services/v2/claim/claim_citizenship\":null, \"http://itsme.services/v2/claim/place_of_birth\":null, \"http://itsme.services/v2/claim/physical_person_photo\":null, \"http://itsme.services/v2/claim/birthdate_as_string\":null, \"http://itsme.services/v2/claim/validityFrom\":null, \"http://itsme.services/v2/claim/validityTo\":null, \"http://itsme.services/v2/claim/IDDocumentSN\":null}} . Response . HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &amp;state=af0ifjsldkj . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#authorization-request",
    "relUrl": "/identification/#authorization-request"
  },"58": {
    "doc": "Identification API",
    "title": "Token Request",
    "content": ". | Public- and private-key | Secret key | . | POST https://idp.[e2e/prd].itsme.services/v2/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the public- and private-key pair method. The parameters below must be included in the body of the POST request, not in the query string. Parameters . | grant_type REQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID token and access token. | . | code REQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | code_verifier OPTIONAL | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. This parameter is REQUIRED if you required PKCE to be enforced. | . | client_assertion_type REQUIRED | Specifies the type of assertion. Set this to urn:ietf:params:oauth:client-assertion-type:jwt-bearer. | . | client_assertion REQUIRED | Is a set of identity and security information, in the form of a JWT, used as an authentication method. To ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code, the JWT MUST be signed, and MAY also be encrypted. If both signing and encryption are performed, it MUST be signed then encrypted, with the result being a Nested JWT (refer to this page for more information).The JWT contains the following claims. | iss REQUIRED | The issuer of the token. This value MUST be the same as the client_id. | . | sub REQUIRED | The subject of the token. This value MUST be the same as the client_id. | . | aud REQUIRED | The full URL of the resource you're using the JWT to authenticate to. Set this to https://idp.[e2e/prd].itsme.services/v2/token. | . | jti REQUIRED | An unique identifier for the token, containing maximum 255 characters. | . | exp REQUIRED | The expiration time of the token in seconds since January 1, 1970 UTC. | . | iat OPTIONAL | The time at which the JWT was issued. | . | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer.. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this page for more information). | . | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/token . To assert the identity of the user, the code received previously needs to be exchanged for an ID token and access token. During this step, your application has to authenticate itself to our server using the secret key method. The parameters below must be included in the body of the POST request, not in the query string. Parameters . | grant_type REQUIRED | Set this to authorization_code to tell the Token Endpoint that your application wants to exchange an authorization code for an ID koken and access token. | . | client_id REQUIRED | It identifies your application. This parameter value is generated during registration. | . | code REQUIRED | The intermediate opaque credential received in the Authorization Response. | . | redirect_uri REQUIRED | It is the URL to which users are redirected once the authentication is complete. It MUST match the value used in the Authorization Request. | . | client_secret REQUIRED | Contains the a key you reveiced when registering your application. This ensures that the request to get the id token and access token is made only from your application, and not from a potential attacker that may have intercepted the authorization code. | . | code_verifier OPTIONAL | High-entropy cryptographic random string using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\", with a minimum length of 43 characters and a maximum length of 128 characters. This parameter is REQUIRED if you required PKCE to be enforced. | . Response . 200 application/json . | access_token | Allows an application to retrieve consented user information from the UserInfo Endpoint. | . | token_type | Provides your application with the information required to successfully utilize the access token. Returned value is Bearer. | . | id_token | A security token that contains information about the authentication of an user, and potentially other requested claim data's. The id_token value is represented as a signed and encrypted JWT. So, before being able to use the ID Token claims you will have to decrypt and verify the signature (refer to this page for more information). | . | . Example . | Public- and private-key | Secret key | . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer &amp;client_assertion=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | Request . POST /token HTTP/1.1 Host: openid.c2id.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &amp;code=SplxlOBeZQQYbYS6WxSbIA &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb &amp;client_id=s6BhdRkqt3 &amp;client_secret=PHNhbWxwOl ... ZT . Response . HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \"id_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..UPzPZWb Da_ZvysMK.7ZXAFd24uTT35_gzrdYeuLBPrPR3Gc8VdB7L7MgZWgS4hiP 72URWNDPbOMLYw4xHx2CVKPGp9K0L05UeSMDcB39n_anV5nZ3BbkNsufx RiANOfoxx2W5jsb8Fj5W8F862wRWmClxTOosszauVhD6ZbhpJM0k9Iw7T CmwlmK3WMg9aE-gSNlvsjgrfB5QFmgYH2PWF1YdWZ1gCdCw3rz1XvxHPV yR9PfSy7SFFEoZos-2Y_rlO4R5_Oel3xy0YA_OucJVnV2x6oblxQ4TBXB 8YMCYyk3m7aS_S_oEs-2yAGCbQgwKU9jwqytF8Yw5X_rZmcbTpdvAF5qu ozfnoiW2ijHxr6xlH_8cibSIjhKOHEPCBTc8AeAb9nHLGrx0H1q02o7nz U-TwxUayrHXLBKd72l6aD8RxwCziATzjVWnvVVR7BmvOAV8L8IY_DTGgn iH2NlHL6_2KVtuB8czkDjEToE-JUfuzoedja9PTzRp6paO3ZpXSQcLl6a 6qBe526hMNEiK9VPRWPOJ8xIqwpg3mSeMjdkvSS6A9xJVH_xEy9jzts1n k2ge-YGrZZiQt8Do7NCd-ic7_HU8timZ_mfPFc8NDYgr0WtPefDQlC6en 8sUcMjuhuZOx_A3cQ7Mvoq662meUbkN64z50oBoh8Drora69I85zXQwes sR9f4z0th2-XDDrPxPop6yuJx8vMmRQNhN55qvwxgFMTEJyvDNAVfBA9s FZlj4hubY3wtYP5nLADjIFLresbrsu6iFQaE7v01FUMMDXcvBi_hw-M9s 0nBuWsQa2rZRcrVJOK9HVXUxXdUfTNL4MrrG5UzT7gdtcpesXeFVLSJtq 7HEGlHi3xaefgo4P5GN562CGVUl41BSmoBJT9oS5YJWKJOEOfpcAhYLKM 5iyMbgOxVz1Fz7z6Pfcd-PRcRlSQlHBXCdhP01AmRw-H_bdoKFIM1D33B 3AmmEKD6XRe8XM79F_gwySJ3AIWUzVLpJxe1lUphzIgy5O-VleJWyKl3D nAkCQwvqV-P-MrjirZckzlDjjfyOlEA_KNAK-PwCvZ5Yh_Wv8f-8LXUWJ ewfOCZmOM5pSKYXl-oZ.hfcIWiYPCtQMheNN8FB0Ww\" \"access_token\": \"SlAV32hkKG\", \"token_type\": \"Bearer\", \"expires_in\": 3600, } . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#token-request",
    "relUrl": "/identification/#token-request"
  },"59": {
    "doc": "Identification API",
    "title": "UserInfo Request",
    "content": ". | Public- and private-key | Secret key | . | GET https://idp.[e2e/prd].itsme.services/v2/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this page for more information). | GET https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/userinfo . The UserInfo Endpoint returns previously consented user profile information to your application. In other words, if the required claims are not returned in the ID Token, you can obtain the additional claims by presenting the access token to the itsme® UserInfo Endpoint. This is achieved by sending a HTTP GET request to the Userinfo Endpoint, passing the access token value in the Authorization header using the Bearer authentication scheme. This is illustrated in the example below. Response . 200 application/json . The UserInfo Response is represented as a signed and encrypted JWT. So, before being able to extract the claims you will have to decrypt and verify the signature (refer to this page for more information). | . Example . Request . GET /userinfo HTTP/1.1 Host: server.example.com Authorization: Bearer SlAV32hkKG . Response . This is an response example containing all possible claims for a Belgian account: . HTTP/1.1 200 OK Content-Type: application/json { \"http://itsme.services/v2/claim/validityFrom\": { \"http://itsme.services/v2/claim/BEeidSn\": \"2018-11-08T00:00:00Z\" }, \"sub\": \"e3xad7upx64grm14ttpnx4c586ve8gy0gp38\", \"birthdate\": \"1978-11-01\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"BEL\", \"gender\": \"male\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"01.11.1978\", \"http://itsme.services/v2/claim/IDDocumentType\": \"I\", \"iss\": \"https://oidc.uat.itsme.services/clientsecret-oidc/csapi/v0.1\", \"http://itsme.services/v2/claim/validityTo\": { \"http://itsme.services/v2/claim/BEeidSn\": \"2028-11-10T00:00:00Z\" }, \"http://itsme.services/v2/claim/claim_citizenship\": \"BE\", \"locale\": \"FR\", \"http://itsme.services/v2/claim/issuance_locality\": { \"http://itsme.services/v2/claim/BEeidSn\": \"BRUXELLES\" }, \"email\": \"test@itsme.be\", \"http://itsme.services/v2/claim/place_of_birth\": { \"city\": \"Brussels\", \"formatted\": \"Brussels\" }, \"address\": { \"locality\": \"TONGEREN\", \"street_address\": \"Jekerstraat 39\", \"postal_code\": \"3700\", \"formatted\": \"Jekerstraat 39 3700 TONGEREN\" }, \"email_verified\": false, \"http://itsme.services/v2/claim/claim_device\": { \"os\": \"ANDROID\", \"appName\": \"be.bmid.itsme.uat\", \"appRelease\": \"4.0.0\", \"deviceLabel\": \"lucye\", \"debugEnabled\": false, \"deviceId\": \"c22de2331dd249bba063afd3507fe3a4f\", \"osRelease\": \"9\", \"manufacturer\": \"LGE\", \"deviceLockLevel\": \"true\", \"rooted\": false, \"deviceModel\": \"LG-H870\", \"msisdn\": \"0032485694175\" }, \"http://itsme.services/v2/claim/BENationalNumber\": \"99060427181\", \"phone_number_verified\": true, \"given_name\": \"George\", \"picture\": \"https://oidc.uat.itsme.services/clientsecret-oidc/csapi/v0.1/picture\", \"http://itsme.services/v2/claim/verificationDate\": { \"http://itsme.services/v2/claim/place_of_birth\": \"2023-04-12T15:02:23Z\", \"birthdate\": \"2023-04-12T15:02:23Z\", \"address\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"2023-04-12T15:02:23Z\", \"gender\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/BENationalNumber\": \"2023-04-12T15:02:23Z\", \"given_name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/claim_citizenship\": \"2023-04-12T15:02:23Z\", \"picture\": \"2023-04-12T15:02:23Z\", \"name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/BEeidSn\": \"2023-04-12T15:02:23Z\", \"family_name\": \"2023-04-12T15:02:23Z\", \"http://itsme.services/v2/claim/physical_person_photo\": \"2023-04-12T15:02:23Z\" }, \"aud\": \"WXw9DMqkEv\", \"http://itsme.services/v2/claim/IDIssuingCountry\": { \"http://itsme.services/v2/claim/place_of_birth\": \"BEL\", \"birthdate\": \"BEL\", \"address\": \"BEL\", \"http://itsme.services/v2/claim/claim_citizenship_as_iso\": \"BEL\", \"gender\": \"BEL\", \"http://itsme.services/v2/claim/birthdate_as_string\": \"BEL\", \"http://itsme.services/v2/claim/BENationalNumber\": \"BEL\", \"given_name\": \"BEL\", \"http://itsme.services/v2/claim/claim_citizenship\": \"BEL\", \"picture\": \"BEL\", \"name\": \"BEL\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"BEL\", \"http://itsme.services/v2/claim/BEeidSn\": \"BEL\", \"family_name\": \"BEL\", \"http://itsme.services/v2/claim/physical_person_photo\": \"BEL\" }, \"name\": \"George Tǎnka\", \"http://itsme.services/v2/claim/IDDocumentSN\": \"431522485012\", \"phone_number\": \"+32 485694175\", \"http://itsme.services/v2/claim/BEeidSn\": \"431522485012\", \"family_name\": \"Tǎnka\", \"http://itsme.services/v2/claim/physical_person_photo\": { \"format\": \"image/jpeg\", \"value\": \"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\" }, \"nbf\": 1681314190, \"exp\": 1681314490, \"iat\": 1681314190 } . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#userinfo-request",
    "relUrl": "/identification/#userinfo-request"
  },"60": {
    "doc": "Identification API",
    "title": "Revoke Request",
    "content": ". | Public- and private-key | Secret key | . | Not applicable. | POST https://oidc.[e2e/prd].itsme.services/clientsecret-oidc/csapi/v0.1/connect/revoke . The Revocation Endpoint enables your application to notify itsme® that a previously obtained access token is no longer needed and MUST be revoked. Parameters . | token REQUIRED | The access_token previously obtained that you want to revoke. | . | token_type_hint OPTIONAL | A hint about the type of the token submitted for revocation. You MAY pass this parameter in order to help itsme® to optimize the token lookup. If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. If used, this is set to access_token because itsme® API don't support refresh tokens. | . Response . 200 . itsme® responds with HTTP status code 200 if the token has been revoked successfully or if the client submitted an invalid token. Invalid tokens do not cause an error response since your application cannot handle such an error in a reasonable way. Moreover, the purpose of the revocation request, invalidating the particular token, is already achieved. | . Example . | Public- and private-key | Secret key | . | Not applicable. | Request . POST /connect/revoke HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW token=45ghiukldjahdnhzdauz&amp;token_type_hint=refresh_token . Response . HTTP/1.1 200 OK . | . ",
    "url": "https://belgianmobileid.github.io/doc/identification/#revoke-request",
    "relUrl": "/identification/#revoke-request"
  },"61": {
    "doc": "Identification API",
    "title": "Identification API",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/identification/",
    "relUrl": "/identification/"
  },"62": {
    "doc": "Azure B2C",
    "title": "What is Azure Active Directory B2C ?",
    "content": "Azure Active Directory B2C (Azure AD B2C) is an identity management service that enables custom control of how your customers sign up, sign in, and manage their profiles when using your iOS, Android, .NET, single-page (SPA), and other applications. Azure AD B2C uses standards-based authentication protocols including OpenID Connect, OAuth 2.0, and SAML. It integrates with most modern applications and commercial off-the-shelf software. You can configure Azure AD B2C to allow users to sign in to your application with credentials from itsme®, as we are supporting the OpenID Connect protocol. By integrating with us, you can offer your consumers the ability to sign in with their existing itsme® accounts, without having to create a new account just for your application. On the sign-up or sign-in page, Azure AD B2C presents a list of external identity providers the user can choose for sign-in. Once they select one of the external identity providers, itsme® for example, they’re redirected to the itsme® to complete the sign in process. After the user successfully signs in, they’re returned to Azure AD B2C for authentication of the account in your application. ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#what-is-azure-active-directory-b2c-",
    "relUrl": "/azureB2C/#what-is-azure-active-directory-b2c-"
  },"63": {
    "doc": "Azure B2C",
    "title": "API reference",
    "content": "To see how to add itsme® in Azure AD B2C, see . Configure itsme® OpenID Connect (OIDC) with Azure Active Directory B2C . ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/#api-reference",
    "relUrl": "/azureB2C/#api-reference"
  },"64": {
    "doc": "Azure B2C",
    "title": "Azure B2C",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/azureB2C/",
    "relUrl": "/azureB2C/"
  },"65": {
    "doc": "CSC Qualified Signature",
    "title": "Introduction",
    "content": "itsme® is a trusted identity provider allowing partners to use verified identities for authentication, authorization and signature on web desktop, mobile web and mobile applications. The CSC API is an API built based on the CSC specification version 1.0.4.0. See https://cloudsignatureconsortium.org and https://cloudsignatureconsortium.org/resources/download-api-specifications to get the specification. The spec is implemented based on the OAuth2 specification. The objective of this document is to provide all the information needed to integrate the AUTH service using the OAuth specifications. At this moment only the Hash(es) Signing variant is available and documented. In this variant, an external Signature Creation Application (SCA) will provide the What You See Is What You Sign (WYSIWYS) experience to the User, provide the hash of the data to be signed to the itsme® service and use the returned digital signature value to format the signature in one of the AdES formats. ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#introduction",
    "relUrl": "/QES-CSC/#introduction"
  },"66": {
    "doc": "CSC Qualified Signature",
    "title": "Particularities compared to the CSC Specification",
    "content": ". | No implementation of / no support for: . | Auth/Login method | Credentials/Authorize | Credentials/ExtendTransaction | Credentials/sendOTP | Signatures/Timestamp | . | OAuth2/Token request . | This operation supports both application/json and application/x-www-form-urlencoded | . | . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#particularities-compared-to-the-csc-specification",
    "relUrl": "/QES-CSC/#particularities-compared-to-the-csc-specification"
  },"67": {
    "doc": "CSC Qualified Signature",
    "title": "Audience",
    "content": "This document is intended to be read by developers of any Signature Creation Application party. Partners who wish to use the itsme sign service through an existing SCA should refer to this SCA instead. ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#audience",
    "relUrl": "/QES-CSC/#audience"
  },"68": {
    "doc": "CSC Qualified Signature",
    "title": "Prerequisites",
    "content": "Before you can integrate your application with itsme® Sign service, you MUST set up a project in the itsme® B2B portal to obtain all the needed information. Please be aware that we support performing up to 70 signatures within 1 itsme® action, but this is an extra option. If you want to make use of it, be sure to mention it to the Onboarding team while setting up your project. ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#prerequisites",
    "relUrl": "/QES-CSC/#prerequisites"
  },"69": {
    "doc": "CSC Qualified Signature",
    "title": "Integrating Sign services",
    "content": "The itsme® Sign flow goes through the steps shown in the sequence diagram below. The BASE_URL to be used in this flow will be communicated during your onboarding process ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#integrating-sign-services",
    "relUrl": "/QES-CSC/#integrating-sign-services"
  },"70": {
    "doc": "CSC Qualified Signature",
    "title": "1. Getting endpoint info",
    "content": "To simplify implementations and increase flexibility, a JSON document is available containing key-value pairs which provide details about CSC configuration, such as the different endpoints, the base URI, region and so on. The method requires a post with a JSON body where you can provide the language of the document you want to retrieve. Supported languages are; EN, FR, NL, DE and their respective ISO language codes. If the language is not supported, English will be used. Example: . POST /info { \"lang\": \"\" } . response: . { \"specs\": \"1.0.3.0\", \"name\": \"itsme®\", \"logo\": \"https://itsmeprdweucscgeneral.blob.core.windows.net/public/logo.jpg\", \"region\": \"BE\", \"lang\": \"EN-US\", \"description\": \"itsme®, your digital ID and a smarter way to sign with your smartphone.\", \"authType\": [ \"oauth2code\" ], \"oauth2\": \"https://sign.prd.itsme.services/csc/v0/oauth2/authorize\", \"methods\": [ \"info\", \"auth/revoke\", \"oauth2/authorize\", \"oauth2/token\", \"credentials/list\", \"credentials/info\", \"signatures/signHash\" ] } . Although the version of the spec mentioned 1.0.3.0, the CSC Sign implementation is fully compliant with version 1.0.4.0. In fact, the specification of 1.0.4.0 explicitly (and confusingly) mentions that specific value. ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#1-getting-endpoint-info",
    "relUrl": "/QES-CSC/#1-getting-endpoint-info"
  },"71": {
    "doc": "CSC Qualified Signature",
    "title": "2. Authorization request",
    "content": "Starts the OAuth 2.0 authorization server using an Authorization Code flow to request authorization for the user to access the remote service resources. The authorization is returned in the form of an authorization code, which the signature application SHALL then use to obtain an access token with the oauth2/token method. After a successful authorization, the server shall send a redirect to the given redirect URI. Below you will find the mandatory and optional query parameters to integrate in the HTTPS GET request: . | client_id REQUIRED | The ClientId you received during the onboarding process. | . | redirect_uri REQUIRED | The URI to which the authentication response should be sent. This must exactly match the redirect URI or regex redirect URI (including query string) configured during the onboarding process. | . | scope REQUIRED | The value has to be service. | . | response_type REQUIRED | The value has to be code. | . | lang optional | The language in which the authorization request is displayed. Supported values are NL, DE, EN FR and their respective ISO language codes. If no value is specified or the language isn't supported, defaults to EN. | . | state optional | The state property is an optional value and is returned in the response of the authorize request. This allows you to maintain a session between your request and our response. | . | account_token REQUIRED | This is the JWT token as defined in RFC 7519 and the CSC documentation. account_token = base64UrlEncode(&lt;JWT_Header&gt;) + \".\" + base64UrlEncode(&lt;JWT_Payload&gt;) + \".\" + base64UrlEncode(&lt;JWT_Signature&gt;) whereby &lt;JWT_Header&gt; = { \"typ\": \"JWT\", \"alg\": \"HS256\" } . &lt;JWT_Payload&gt; = { \"sub\": \"&lt;Account_ID&gt;\", ‘Account ID \"iat\": &lt;Unix_Epoch_Time&gt;, ‘Issued At Time \"jti\": \"&lt;Token_Unique_Identifier&gt;\", ‘JWT ID \"iss\": \"&lt;Signature_Application_Name&gt;\", ‘Issuer \"azp\": \"&lt;client_id&gt;\" ‘Authorized presenter } . &lt;JWT_Signature&gt; = HMACSHA256( base64UrlEncode(&lt;JWT_Header&gt;) + \".\" + base64UrlEncode(&lt;JWT_Payload&gt;), &lt;client_secret&gt; ) . Parameters: | typ REQUIRED | MUST be the value JWT. | . | alg REQUIRED | MUST be the value HS256. | . | sub REQUIRED | The client-defined account_id that allows the RSSP to identify the account or user initiating the authorization transaction. | . | iat REQUIRED | The Unix Epoch time when the account_token was issued. The value is used to determine the age of the JWT. The RSSP SHOULD define the lifetime of the JWT and SHALL accept or reject an account_token based on its own expiration policy. | . | jti REQUIRED | A unique identifier for the JWT. This protects from replay attacks performed by reusing the same account_token. | . | iss OPTIONAL | The name of the issuer of the token (e.g. the commercial name of the signature application). | . | azp REQUIRED | The unique client_id previously assigned to the signature application by the remote service. | . Implementation notes . | itsme SHALL securely share the OAuth 2.0 client_id and client_secret with the SCA as part of the onboarding process. | The JWT_signature required to generate the account_token SHALL be calculated with the HMAC function, using as shared secret the SHA256 hash of the OAuth 2.0 client_secret. | The SCA MUST register in advance with itsme the list of Account_ID parameters associated with those users that are authorized to access a restricted authorization server. | . | . | clientData not supported | As clientData can expose confidential data, we do not support it. | . Example: . GET /oauth2/authorize? response_type=code &amp;client_id={ClientId}} &amp;redirect_uri={RedirectUrl} &amp;scope=service &amp;lang={EN | FR | NL | DE} &amp;state=example &amp;account_token={AccountToken} . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#2-authorization-request",
    "relUrl": "/QES-CSC/#2-authorization-request"
  },"72": {
    "doc": "CSC Qualified Signature",
    "title": "3. Capturing the authorization code",
    "content": "If the user is successfully authenticated and authorizes access to the Identification Request, the authorization server will return an authorization code and the provided state. Example: . { 302 Found Location: {RedirectUrl}? code=66353038303864632D306665392D346563352D393633352D3565616431383639376261357C426561726572 &amp;state=example } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#3-capturing-the-authorization-code",
    "relUrl": "/QES-CSC/#3-capturing-the-authorization-code"
  },"73": {
    "doc": "CSC Qualified Signature",
    "title": "4. Requesting a token",
    "content": "Obtain an access token from the authorization server by passing the clientId and clientSecret in the body. After a successful request, the authorization server will return a bearer or SAD token, depending on the scope in the oauth2/authorize method. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | grant_type REQUIRED | For the moment authorization_code is the only supported value. | . | client_id REQUIRED | The ClientId you received during the onboarding process. | . | client_secret REQUIRED | The Client Secret you received during the onboarding process. | . | code REQUIRED | The code returned by the authorize request. | . | redirect_url REQUIRED | Should be equal to the redirect URI provided in the authorize request. | . Example: . POST /oauth2/token { \"grant_type\": \"authorization_code\", \"client_id\": \"{ClientId}\", \"client_secret\": \"{ClientSecret}\", \"code\": \"66353038303864632D306665392D346563352D393633352D3565616431383639376261357C426561726572\", \"redirect_uri\": \"{RedirectUrl}\" } . response: . { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ\", \"refresh_token\": null, \"token_type\": \"Bearer\", \"expires_in\": 3600 } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#4-requesting-a-token",
    "relUrl": "/QES-CSC/#4-requesting-a-token"
  },"74": {
    "doc": "CSC Qualified Signature",
    "title": "5. Getting credential id(‘s)",
    "content": "Returns the list of credentials associated with a user identifier, an itsme® user will always have exactly 1 credential. This POST request contains only 1 parameter: . | maxResults REQUIRED | The maximum number of items to return from this call. The value MUST be between 1 and 300. | . Example: . POST /credentials/list Content-Type: application/json Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ { \"maxResults\": 10 } . response: . { \"credentialIDs\": [ \"f7642e62-72eb-4e83-8825-80c67d402c03\" ] } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#5-getting-credential-ids",
    "relUrl": "/QES-CSC/#5-getting-credential-ids"
  },"75": {
    "doc": "CSC Qualified Signature",
    "title": "6. Obtaining credential info",
    "content": "Retrieve the credential and return the certificate chain associated with it. Using the Certificate Info, the SCA can calculate the hash of the document to be signed. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | credentialID REQUIRED | The credentialId obtained in the credentials/list method. | . | certificates REQUIRED | The only value supported right now is chain. This means that the full certificate chain will be returned. | . | certInfo Optional | Supported values are true or false. If set to true various parameters will contain information from the end entity certificate. The default value is is false. | . | authInfo Optional | We do not support this setting. | . | lang Optional | The same value as provided in the authorize request. | . Example: . { POST /credentials/info Content-Type: application/json Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ { \"credentialID\": \"f7642e62-72eb-4e83-8825-80c67d402c03\", \"certificates\": \"chain\", \"certInfo\": true, \"lang\": \"{EN | FR | NL | DE}\" } } . response: . { \"description\": null, \"key\": { \"status\": \"enabled\", \"algo\": [ \"1.2.840.113549.1.1.11\" ], \"len\": 2048 }, \"cert\": { \"status\": \"valid\", \"certificates\": [ ... ], \"issuerDN\": \"Provided if certInfo is true\", \"serialNumber\": \"Provided if certInfo is true\", \"subjectDN\": \"Provided if certInfo is true\", \"validFrom\": \"Provided if certInfo is true\", \"validTo\": \"Provided if certInfo is true\" }, \"authMode\": \"oauth2code\", \"SCAL\": \"2\", \"PIN\": { \"presence\": \"false\", \"label\": null, \"description\": null }, \"OTP\": { \"presence\": \"false\", \"type\": null, \"ID\": null, \"provider\": null, \"format\": null, \"label\": null, \"description\": null }, \"multiSign\": true } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#6-obtaining-credential-info",
    "relUrl": "/QES-CSC/#6-obtaining-credential-info"
  },"76": {
    "doc": "CSC Qualified Signature",
    "title": "7. Authorization request (Dance 2)",
    "content": "This GET request should include the following query parameters: . | client_id REQUIRED | The ClientId you received during the onboarding process. | . | redirect_uri REQUIRED | The URI to which the authentication response should be sent. This must exactly match the redirect URI or regex redirect URI (including query string) configured during the onboarding process. | . | scope REQUIRED | The value has to be credential. | . | response_type REQUIRED | The value has to be code. | . | lang optional | The language in which the authorization request is displayed. Supported values are NL, DE, EN FR and their respective ISO language codes. If no value is specified or the language isn't supported, defaults to EN. | . | state optional | The state property is an optional value and is returned in the response of the authorize request. This allows you to maintain a session between your request and our response. | . | account_token REQUIRED | This is the JWT token as defined in RFC 7519 and the CSC documentation. See description above. | . | credentialID REQUIRED | The credentialId obtained in the credentials/list method. | . | numSignatures REQUIRED | This value must be the number of hashes you are sending. Must be between 1 and 70. | . | hash REQUIRED | A (list of) base64url-encoded hash value(s) to be signed. It allows the server to bind the SAD to the hash, thus preventing an authorization to be used to sign a different content. Multiple (up to 70) hashes are supported in the form of a comma-seperated list. | . | description Optional | An optional description about the (package of) document(s) being signed. This value will be visible in the itsme application. | . | clientData not supported | As clientData can expose confidential data, we do not support it. | . Example: . GET /oauth2/authorize? response_type=code &amp;client_id= &amp;redirect_uri= &amp;scope=credential &amp;lang= &amp;state=test &amp;credentialID=f7642e62-72eb-4e83-8825-80c67d402c03 &amp;numSignatures=2 &amp;hash=w6uP8Tcg6K2QR905Rms8iXTlksL6OD1KOWBxTK7wxPI%3d,11rkeh832bdhwzc99iuvwegst9bfi8hgirfr5Rms8iXi &amp;description=exampleDescription . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#7-authorization-request-dance-2",
    "relUrl": "/QES-CSC/#7-authorization-request-dance-2"
  },"77": {
    "doc": "CSC Qualified Signature",
    "title": "8. Capturing the authorization code",
    "content": "If the user is successfully authenticated and authorizes access to the Identification Request, the authorization server will return an authorization code and the provided state. Example: . { 302 Found Location: {RedirectUrl}? code=66353038303864632D306665392D346563352D393633352D3565616431383639376261357C426561726572 &amp;state=example } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#8-capturing-the-authorization-code",
    "relUrl": "/QES-CSC/#8-capturing-the-authorization-code"
  },"78": {
    "doc": "CSC Qualified Signature",
    "title": "9. Requesting a token",
    "content": "Obtain an access token from the authorization server by passing the clientId and clientSecret in the body. After a successful request, the authorization server will return a bearer or SAD token, depending on the scope in the oauth2/authorize method. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | grant_type REQUIRED | For the moment authorization_code is the only supported value. | . | client_id REQUIRED | The ClientId you received during the onboarding process. | . | client_secret REQUIRED | The Client Secret you received during the onboarding process. | . | code REQUIRED | The code returned by the authorize request. | . | redirect_url REQUIRED | Should be equal to the redirect URI provided in the authorize request. | . Example: . POST /oauth2/token { \"grant_type\": \"authorization_code\", \"client_id\": \"{ClientId}\", \"client_secret\": \"{ClientSecret}\", \"code\": \"61316261316233612D383732392D346239312D613534322D3037643635393933623134617C534144\", \"redirect_uri\": \"{RedirectUrl}\" } . response: . { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ\", \"refresh_token\": null, \"token_type\": \"SAD\", \"expires_in\": 3600 } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#9-requesting-a-token",
    "relUrl": "/QES-CSC/#9-requesting-a-token"
  },"79": {
    "doc": "CSC Qualified Signature",
    "title": "10. Sign hash",
    "content": "Calculate the remote digital signature of the hash value provided in the request. This method requires credential authorization in the form of Signature Activation Data (SAD) in the request body and the bearer token in the headers. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | credentialID Required | The credentialId retrieved from the credentials/list method. | . | SAD Required | The SAD token retrieved from the oauth2/token method. | . | hash Required | Array containing the base64 value(s) of the hash(es) provided in the oauth2/authorize method. | . | signAlgo Required | The OID of the algorithm to use for signing as provided in the credentials/info response. | . Example: . POST /signatures/signhash Content-Type: application/json Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ { \"credentialID\": \"f7642e62-72eb-4e83-8825-80c67d402c03\", \"SAD\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwZmZhMDZlNy1lNmUyLTQ2NTgtYmE4OC1hODFiMzMwN2JkZGUiLCJuYW1lIjoiaGN3OWpoYzFuNmdqODN3OGlwYWx3endmeG16a2Vmc2x4MGl0IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJaUjdRUFNIVjNJWFJSS0k3WlZSQVlPR0hQNlRJR0ZWUyIsIkNyZWRlbnRpYWwiOiJ0cnVlIiwiZXhwIjoxNTYyMTQyNDE4LCJpc3MiOiJjc2NfYXBpIiwiYXVkIjoiY3NjX2FwaSJ9.KJvjsN6Ao3ZqJBaifoku2MlUNdwdhJX8RZ_IO68Z5hg\", \"hash\": [ \"w6uP8Tcg6K2QR905Rms8iXTlksL6OD1KOWBxTK7wxPI=\", \"11rkeh832bdhwzc99iuvwegst9bfi8hgirfr5Rms8iXi\" ], \"signAlgo\": \"1.2.840.113549.1.1.11\" } . response: . { \"signatures\": [ \"i0H6bbiwVcxGDjGeNn2qhY...gbWbs6/pp9lWe4w6o5UG3BZhiZUfQ==\", \"uiainrstinertanierstn398aiu...iueldvpa65enzdljr98lvvddq=\" ] } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#10-sign-hash",
    "relUrl": "/QES-CSC/#10-sign-hash"
  },"80": {
    "doc": "CSC Qualified Signature",
    "title": "11. Revoke session",
    "content": "Revoke an active active token with this request. When the signature application needs to terminate a session, it is RECOMMENDED to invoke this method to prevent further access by reusing the token. Otherwise the session will be deleted after one hour. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | token Required | The access token retrieved in the first oauth2/token method. | . | token_type_hint Required | This value MUST be access_token | . | clientData Not supported | As clientData can expose confidential data, we do not support it. | . Example: . POST /auth/revoke Content-Type: application/json Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2VlM2ZiNS0yOWRhLTQ5OTktYTZmMy01NTE1YTYwN2RlYTYiLCJuYW1lIjoiOXdxOWlpOG5kaWxmMzZrM3VvemVoOGdua2pzODRzY210aTc3IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiJZSU02T0lVM0RNNUhUSEhGUEpUU09FSUM3Rk9ORzVXNiIsImV4cCI6MTU4MDM5ODYyOCwiaXNzIjoiY3NjX2FwaSIsImF1ZCI6ImNzY19hcGkifQ.kJERr_vNQaRabwSulL0Xbi2RBmrpXypvrxcGDC58nUQ\", \"token_type_hint\": \"access_token\" } . response: . 204 NOCONTENT . ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#11-revoke-session",
    "relUrl": "/QES-CSC/#11-revoke-session"
  },"81": {
    "doc": "CSC Qualified Signature",
    "title": "Appendixes",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#appendixes",
    "relUrl": "/QES-CSC/#appendixes"
  },"82": {
    "doc": "CSC Qualified Signature",
    "title": "Supported character set",
    "content": "The character set we support for free text fields is ISO 8859-15. You can buy the specification on ISO website or find a free version on Wikipedia. You might be interested in knowing that, although most usual characters are supported, some softwares-generated characters like curly apostrophes and long dashes are not part of ISO 8859-15. If you provide a non-supported character in a free text field the signing flow will be stopped and you will receive an error message back. ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/#supported-character-set",
    "relUrl": "/QES-CSC/#supported-character-set"
  },"83": {
    "doc": "CSC Qualified Signature",
    "title": "CSC Qualified Signature",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/QES-CSC/",
    "relUrl": "/QES-CSC/"
  },"84": {
    "doc": "OASIS Qualified Signature",
    "title": "Introduction",
    "content": "itsme® is a trusted identity provider allowing partners to use verified identities for authentication and authorization on web desktop, mobile web and mobile applications. The objective of this document is to provide all the information needed to integrate the Sign service. This implementation of the Sign service is based on Oasis Digital Signature Services (DSS) protocol, using an asynchronous pattern in a pre-2.0 fashion. At this moment only the Hash(es) Signing variant is available and documented. In this variant, an external Signature Creation Application (SCA) will provide the What You See Is What You Sign (WYSIWYS) experience to the User, provide the hash of the data to be signed to the itsme® service and use the returned digital signature value to format the signature in one of the AdES formats. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#introduction",
    "relUrl": "/QES-OASIS/#introduction"
  },"85": {
    "doc": "OASIS Qualified Signature",
    "title": "Audience",
    "content": "This document is intended to be read by developers of any Signature Creation Application party. Partners who wish to use the itsme sign service through an existing SCA should refer to this SCA instead. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#audience",
    "relUrl": "/QES-OASIS/#audience"
  },"86": {
    "doc": "OASIS Qualified Signature",
    "title": "Prerequisites",
    "content": "Before you can integrate your application with itsme® Sign service, you MUST set up a project in the itsme® B2B portal to obtain all the needed information. Please be aware that we support performing up to 70 signatures within 1 itsme® action, but this is an extra option. If you want to make use of it, be sure to mention it to the Onboarding team while setting up your project. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#prerequisites",
    "relUrl": "/QES-OASIS/#prerequisites"
  },"87": {
    "doc": "OASIS Qualified Signature",
    "title": "Integrating Sign services",
    "content": "The itsme® Sign flow goes through the steps shown in the sequence diagram below. | The User indicates on your end he wishes to sign a document with itsme® | Your web desktop, mobile web or mobile SCA application sends a request to itsme® Integration Layer Back-End in order to create the User’s Identification session and obtain the User’s signing certificate to be include in the data to be signed. | itsme® returns the session id and the redirect URL specific to the User to your SCA Back-End. | Your SCA Front-End redirects the User to the Integration Layer Front-End of itsme®, meaning that the User will be identified in the meanwhile (in case the \"userCode\" is transmitted by the SCA, this step will be skipped as the user will already be identified). If the User has no signature certificate yet, the certificate creation process will be initiated automatically. | Finally, when the User is authenticated and has a signature certificate, he is redirected to the your SCA Front-End. The redirection to your SCA Front-End SHOULD be (almost) transparent to the User (with a possible displaying of a spinner) as the laps of time between step 5 and step 11 of this diagram SHOULD be extremely short. | Your SCA Back-End contacts the itsme® Integration Layer Back-End to get the signature certificate of the User. | The itsme® Integration Layer Back-End returns your SCA Back-End the signer information as well as the signature certificate of the User. | Your SCA Back-End constructs the data to be signed and the hash(es) of the signature(s) will be computed by yourself. We support up to 70 hashes in 1 flow. The value of a hash MUST be base64url encoded. | Your SCA Back-End will provide the hash(es) to the itsme® Integration Layer Back-End to request the digital signature value. | A session id and redirect URL are returned by itsme® to your SCA Back-End. | Your SCA frontend will then redirect the User to the signature webpage of itsme®, where he is guided through the itsme part of the signing flow. | The session of the User at itsme® side ends as the process is finished and the User is redirected to your SCA Front-End. | Your SCA Back-End will contact the itsme® Integration Layer Back-End to check the signature status (same endpoint as for creating the signature session). | itsme® then returns the signature completion status and the digital signature value(s). | At this stage, your SCA is able to confirm the success of the operation and display a success message. | . The BASE_URL to be used in this flow will be communicated during your onboarding process ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#integrating-sign-services",
    "relUrl": "/QES-OASIS/#integrating-sign-services"
  },"88": {
    "doc": "OASIS Qualified Signature",
    "title": "1. Checking itsme® Sign configuration",
    "content": "Two JSON documents are available to ease the integration of itsme sign service: . | The discovery document | The swagger of the B2B interface | . Discovery document . To simplify implementations and increase flexibility, the following key-value pairs about itsme® configuration can be retrieved from a JSON document: . | the signature policies | commitment types | supported languages | . The JSON document for itsme® Sign service may be retrieved from BASE_URL/qes-partners/1.0.0/.well-known/configuration. Please note we are using SSLMA as authentication method, combined with IP filtering, as specified in SSLMA Authentication. If you need to access the discovery document before setting up the connectivity, you can use the public version here (this one is updated manually, while the previous one is automatically generated): https://belgianmobileid.github.io/doc/public/resources/qesdiscovery.json . B2B interface swagger . The swagger of the B2B interface (for the back-end to back-end calls) may be retrieved from https://belgianmobileid.github.io/doc/public/resources/qesB2B.json . ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#1-checking-itsme-sign-configuration",
    "relUrl": "/QES-OASIS/#1-checking-itsme-sign-configuration"
  },"89": {
    "doc": "OASIS Qualified Signature",
    "title": "2. Starting a new User identification session",
    "content": "This section relates to the step 2 of the sequence diagram. First, you will forge a HTTPS POST request that MUST be sent to the itsme® User Identification Endpoint, which is BASE_URL/qes-partners/1.0.0/user_identification. Please note we are using SSLMA as authentication method, combined with IP filtering, as specified in SSLMA Authentication. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | partnerCode REQUIRED | This MUST be the client identifier you received when registering your application during the onboarding process. This parameter will be translated to a label describing the customer for which the User is signing the document. | . | userCode OPTIONAL | The userCode is the unique identifier created by itsme for a user connecting with a Service Provider. A user has a different user code at each Service Provider. You SHOULD provide a \"userCode\" known by itsme if you already have authenticated the User who needs to sign the document. Providing a userCode will bypass the identification screen (user won't have to enter his phone number). | . | serviceCode REQUIRED | It MUST contain the value of the serviceCode defined for your application during the onboarding process. | . | lang REQUIRED | This parameters defines the recommended language to be used for GUI interaction. | . | redirectUrl REQUIRED | This is the URL to which the User will be redirected to your remote SCA. This MUST exactly match the redirect URL of the specified service defined when registering your application during the [onboarding process](#prerequisites). | . Example: . POST /BASE_URL/qes-partners/1.0.0/user_identification HTTP/1.1 { \"partnerCode\":\"myClientID\", \"serviceCode\":\"myServiceCode\", \"redirectUrl\":\"https://myServiceRedirectUrl.partner.be?sessionID=myCustomSessionID\", \"userCode\":\"endUserUserCode\", \"lang\":\"FR\" } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#2-starting-a-new-user-identification-session",
    "relUrl": "/QES-OASIS/#2-starting-a-new-user-identification-session"
  },"90": {
    "doc": "OASIS Qualified Signature",
    "title": "3. Capturing the Identification Response",
    "content": "This section relates to the step 3 of the sequence diagram. Capturing a successful Identification Code . If the User is successfully authenticated and authorizes access to the Identification Request, itsme® will return a response to your server component. This is achieved by returning an Identification Response to the “redirectUrl” specified previously in the Identification Request (preserving the URL parameters). You MAY receive a set-cookie header back from this call, but you SHOULD ignore it, it is never used in this context. The response will contain: . | status ALWAYS | It is the status of User Identification Request. | . | statusReason OPTIONAL | It explains the reason of a failure. No reason is given in case the request status is pending or success. | . | asyncRespID ALWAYS | This parameter is the identifier of a User identification session. | . | identificationUrl ALWAYS | This is the itsme® URL of the signature welcome page. On this webpage the User will identify himself by entering his mobile phone number. | . Although the swagger specifies asyncRespId in the request, you must ask asyncRespID instead (with a capital D). Example: . { \"status\": \"OK\", \"asyncRespID\": \"4kpr55zdi2mk9ns27awgngkltoenfy04gi9b\", \"identificationUrl\": \"https://uatmerchant.itsme.be/qes/identify_yourself?language=FR&amp;q=ss4liz8kjk1xxz8taj3nbxae7zqty6eq\" } . Handling Error Response . See Appendixes to get more information on the error codes. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#3-capturing-the-identification-response",
    "relUrl": "/QES-OASIS/#3-capturing-the-identification-response"
  },"91": {
    "doc": "OASIS Qualified Signature",
    "title": "4. Redirecting the end user",
    "content": "This section relates to the step 4 of the sequence diagram. The next step is to redirect the end user to our Front-End, so that we can process the identification session. You must do that by forging a GET request towards the url specified at previous step, in the parameter identificationUrl. Please note there is no built-in parameter designed to let you getting your session context back after the redirection to your FE (a parameter similar to the ‘state’ parameter in OpenID). However, you MAY add any query parameter to the URL specified in identificationUrl and it will be preserved during the redirection, effectively allowing you to craft a custom parameter for finding back your session context. Also, please note that the duration of the identification process may strongly vary from a few seconds to a few minutes, depending on whether or not we need to create a certificate for this end user. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#4-redirecting-the-end-user",
    "relUrl": "/QES-OASIS/#4-redirecting-the-end-user"
  },"92": {
    "doc": "OASIS Qualified Signature",
    "title": "5. Requesting the User identification session status",
    "content": "This section relates to the step 6 of the sequence diagram. By calling the Identification Session Status Endpoint, you are checking the status of the User identification session. This endpoint is BASE_URL/qes-partners/1.0.0/user_identification/status. Please note we are using SSLMA as authentication method, combined with IP filtering, as specified in SSLMA Authentication. Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | partnerCode REQUIRED | This MUST be the client identifier you received when registering your application during the onboarding process. This parameter will be translated to a label describing the customer for which the User is signing the document. | . | serviceCode REQUIRED | It MUST contain the value It MUST contain the value of the serviceCode defined for your application during the onboarding process. | . | asyncRespID REQUIRED | This parameter is the identifier of a User identification session. This value MUST be retrieved from the Identification Response. | . Example: . POST /BASE_URL/qes-partners/1.0.0/user_identification/status HTTP/1.1 { \"partnerCode\":\"myPartnerCode\", \"serviceCode\":\"myServiceCode\", \"asyncRespID\":\"4kpr55zdi2mk9ns27awgngkltoenfy04gi9b\" } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#5-requesting-the-user-identification-session-status",
    "relUrl": "/QES-OASIS/#5-requesting-the-user-identification-session-status"
  },"93": {
    "doc": "OASIS Qualified Signature",
    "title": "6. Capturing the User identification status info",
    "content": "This section relates to the step 7 of the sequence diagram. If the Identification Session Status Request has been sucessfully validated we will return an HTTP 200 OK response as in the example aside. In other words, you will get the confirmation that the User can perform a Sign transaction with itsme® and retrieve the User certificate reference value. The response body will include the following values: . | status ALWAYS | It is the status of User Identification Request. | . | userCode OPTIONAL | The userCode is the unique identifier created by itsme for a user connecting with a Service Provider. A user has a different user code at each Service Provider. Is always returned if the status indicates a successful identification. | . | certificate ALWAYS | The certificate created for the User, under PEM format. Only the final certificate is returned here (not the full chain). Is always returned if the status indicates a successful identification. | . | fullCertificateChain ALWAYS | The certificate created for the User, under PEM format. The full chain is returned here. Is always returned if the status indicates a successful identification. | . Example: . { \"status\": \"OK\", \"userCode\": \"9o8f04wm1g0bdc8gmgcuxp2ehgn7txh0x2kq\", \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIGojCCBIqgAwIBAgIUPekSHohW1BwH+TyPTsGVIA3LinEwDQYJKoZIhvcNAQEL\\nBQAwTjELMAkGA1UEBhMCQk0xGTAXBgNVBAoMEFF1b1ZhZGlzIExpbWl0ZWQxJDAi\\nBgNVBAMMG1F1b1ZhZGlzIE5vIFJlbGlhbmNlIElDQSBHMzAeFw0yMTAxMTExNDQ5\\nMjVaFw0yMTA4MDUxODA5MjhaMG8xCzAJBgNVBAYTAkJFMRAwDgYDVQQHDAdCcnVz\\nc2VsMRQwEgYDVQQFEws4OTExMjQzMzUxODENMAsGA1UEBAwEVGVzdDERMA8GA1UE\\nKgwIU3RlcGhhbmUxFjAUBgNVBAMMDVRlc3QgU3RlcGhhbmUwggEiMA0GCSqGSIb3\\nDQEBAQUAA4IBDwAwggEKAoIBAQC6by7/bmX8EB7h1B4hFwBVbQjDWwrV8U9uiZVq\\nQRlPPfjGaWI19q5KzuUD1OfntsQn2gUW8xfrNi07jm0PbJ/IMlVQt/awKU7uYcwF\\nx0NyyUTDPzf6L+mj9WF+NQjD4S5aWMBK9eB9tg+PxK+AC3Al2TI20VQTzYuzutCF\\ndFBMgIOo7XktRl3zy2IKz8BBXEIFhfuhZTpyEqrLWw5nI0SZ5Cdicxx/baIUylVi\\nw93lD2YZ1gmwqRXgbtGFVhRLWLUldq/SNXM8gdFeOyczLALz23pPE+UQS1YCOChs\\nQzoOmivxKOxrTGEkuYhoRM7d64l0e26ncFP7IajU6TxJ6/wNAgMBAAGjggJVMIIC\\nUTAfBgNVHSMEGDAWgBR8sacoMBd5cnponmoZD9ZuoTXIPjB3BggrBgEFBQcBAQRr\\nMGkwOAYIKwYBBQUHMAKGLGh0dHA6Ly90cnVzdC5xdW92YWRpc2dsb2JhbC5jb20v\\ncXZuaWNhZzMuY3J0MC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcGRldi5xdW92YWRp\\nc2dsb2JhbC5jb20wWgYDVR0gBFMwUTBEBgorBgEEAb5YAYMQMDYwNAYIKwYBBQUH\\nAgEWKGh0dHA6Ly93d3cucXVvdmFkaXNnbG9iYWwuY29tL3JlcG9zaXRvcnkwCQYH\\nBACL7EABAjApBgNVHSUEIjAgBggrBgEFBQcDAgYIKwYBBQUHAwQGCisGAQQBgjcK\\nAwwwOwYDVR0fBDQwMjAwoC6gLIYqaHR0cDovL2NybC5xdW92YWRpc2dsb2JhbC5j\\nb20vcXZuaWNhZzMuY3JsMB0GA1UdDgQWBBSGZhmrmw5uOtQhC8rUItFME0QGwzAO\\nBgNVHQ8BAf8EBAMCBsAwNAYKKoZIhvcvAQEJAQQmMCQCAQGGH2h0dHA6Ly90cy5x\\ndW92YWRpc2dsb2JhbC5jb20vYmUwgYsGCCsGAQUFBwEDBH8wfTAVBggrBgEFBQcL\\nAjAJBgcEAIvsSQEBMAgGBgQAjkYBATAIBgYEAI5GAQQwEwYGBACORgEGMAkGBwQA\\njkYBBgEwOwYGBACORgEFMDEwLxYpaHR0cHM6Ly93d3cucXVvdmFkaXNnbG9iYWwu\\nY29tL3JlcG9zaXRvcnkTAmVuMA0GCSqGSIb3DQEBCwUAA4ICAQBqzBPGLtFdBjLT\\n2c9faYHPHFrH9BIA0NjXPAis61KwGtl00sJYunSVKC+3+Mmnq3p0P+ur/JvIPp58\\nIjUzVs1Sa+SRRRjVxA+NzAo6ZhdUXzq/+8pW3PWqWmDdB08RI/QPkFDo9jQPtuv+\\niTgPbOd79y1uR49bdfYrmrb66lNulUMmKI66QzlTUcGGVkyXsh0D7RgJjlWZAW3m\\n+TmpDm62GbpNLuzBXeG9A5zMQvfRkBz4efEXKJS+c2YsR3h0sl5fy0ZFAaRjGnFM\\nxh/GF0aW4KlvPCh9mzubkPwraDsMsCziihCARZsyDtLvYgeRUIzCqfKKPsPWPQs8\\nTG0QCVVvJTglgFY1OYE7+9SO0BlM3GWe5utwpOtobKnnCxc6ZJn4x2LiTibEZTRR\\nIohEIp8XCmgxw6nhkJrdvml3V9vFulMYB+YBOnTi93LR/yL/fQvprO1otFtk52pI\\nttvWSaC31klAgn2x+0SDK+ZsF6hT1JhPjtSV7srQDbrtijVKp4Kik8GbqRkLyJmf\\n1g7vdi/f8S6U142Ge7YJAL0Y+xb6Gl0GZs5QGhdRioHq1qOvFtdcitgK0JDz+ZlO\\nipHe66JI84cGWAdB0TkzuwYKM7Bt1YluhnyRP3iVGj91An6eBK9uTE9BzlPXeD3s\\nZ8MR3qInvxGZnJsnbUJIYh+sDse0bw==\\n-----END CERTIFICATE-----\\n\", \"fullCertificateChain\": \"-----BEGIN CERTIFICATE-----\\nMIIGojCCBIqgAwIBAgIUPekSHohW1BwH+TyPTsGVIA3LinEwDQYJKoZIhvcNAQEL\\nBQAwTjELMAkGA1UEBhMCQk0xGTAXBgNVBAoMEFF1b1ZhZGlzIExpbWl0ZWQxJDAi\\nBgNVBAMMG1F1b1ZhZGlzIE5vIFJlbGlhbmNlIElDQSBHMzAeFw0yMTAxMTExNDQ5\\nMjVaFw0yMTA4MDUxODA5MjhaMG8xCzAJBgNVBAYTAkJFMRAwDgYDVQQHDAdCcnVz\\nc2VsMRQwEgYDVQQFEws4OTExMjQzMzUxODENMAsGA1UEBAwEVGVzdDERMA8GA1UE\\nKgwIU3RlcGhhbmUxFjAUBgNVBAMMDVRlc3QgU3RlcGhhbmUwggEiMA0GCSqGSIb3\\nDQEBAQUAA4IBDwAwggEKAoIBAQC6by7/bmX8EB7h1B4hFwBVbQjDWwrV8U9uiZVq\\nQRlPPfjGaWI19q5KzuUD1OfntsQn2gUW8xfrNi07jm0PbJ/IMlVQt/awKU7uYcwF\\nx0NyyUTDPzf6L+mj9WF+NQjD4S5aWMBK9eB9tg+PxK+AC3Al2TI20VQTzYuzutCF\\ndFBMgIOo7XktRl3zy2IKz8BBXEIFhfuhZTpyEqrLWw5nI0SZ5Cdicxx/baIUylVi\\nw93lD2YZ1gmwqRXgbtGFVhRLWLUldq/SNXM8gdFeOyczLALz23pPE+UQS1YCOChs\\nQzoOmivxKOxrTGEkuYhoRM7d64l0e26ncFP7IajU6TxJ6/wNAgMBAAGjggJVMIIC\\nUTAfBgNVHSMEGDAWgBR8sacoMBd5cnponmoZD9ZuoTXIPjB3BggrBgEFBQcBAQRr\\nMGkwOAYIKwYBBQUHMAKGLGh0dHA6Ly90cnVzdC5xdW92YWRpc2dsb2JhbC5jb20v\\ncXZuaWNhZzMuY3J0MC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcGRldi5xdW92YWRp\\nc2dsb2JhbC5jb20wWgYDVR0gBFMwUTBEBgorBgEEAb5YAYMQMDYwNAYIKwYBBQUH\\nAgEWKGh0dHA6Ly93d3cucXVvdmFkaXNnbG9iYWwuY29tL3JlcG9zaXRvcnkwCQYH\\nBACL7EABAjApBgNVHSUEIjAgBggrBgEFBQcDAgYIKwYBBQUHAwQGCisGAQQBgjcK\\nAwwwOwYDVR0fBDQwMjAwoC6gLIYqaHR0cDovL2NybC5xdW92YWRpc2dsb2JhbC5j\\nb20vcXZuaWNhZzMuY3JsMB0GA1UdDgQWBBSGZhmrmw5uOtQhC8rUItFME0QGwzAO\\nBgNVHQ8BAf8EBAMCBsAwNAYKKoZIhvcvAQEJAQQmMCQCAQGGH2h0dHA6Ly90cy5x\\ndW92YWRpc2dsb2JhbC5jb20vYmUwgYsGCCsGAQUFBwEDBH8wfTAVBggrBgEFBQcL\\nAjAJBgcEAIvsSQEBMAgGBgQAjkYBATAIBgYEAI5GAQQwEwYGBACORgEGMAkGBwQA\\njkYBBgEwOwYGBACORgEFMDEwLxYpaHR0cHM6Ly93d3cucXVvdmFkaXNnbG9iYWwu\\nY29tL3JlcG9zaXRvcnkTAmVuMA0GCSqGSIb3DQEBCwUAA4ICAQBqzBPGLtFdBjLT\\n2c9faYHPHFrH9BIA0NjXPAis61KwGtl00sJYunSVKC+3+Mmnq3p0P+ur/JvIPp58\\nIjUzVs1Sa+SRRRjVxA+NzAo6ZhdUXzq/+8pW3PWqWmDdB08RI/QPkFDo9jQPtuv+\\niTgPbOd79y1uR49bdfYrmrb66lNulUMmKI66QzlTUcGGVkyXsh0D7RgJjlWZAW3m\\n+TmpDm62GbpNLuzBXeG9A5zMQvfRkBz4efEXKJS+c2YsR3h0sl5fy0ZFAaRjGnFM\\nxh/GF0aW4KlvPCh9mzubkPwraDsMsCziihCARZsyDtLvYgeRUIzCqfKKPsPWPQs8\\nTG0QCVVvJTglgFY1OYE7+9SO0BlM3GWe5utwpOtobKnnCxc6ZJn4x2LiTibEZTRR\\nIohEIp8XCmgxw6nhkJrdvml3V9vFulMYB+YBOnTi93LR/yL/fQvprO1otFtk52pI\\nttvWSaC31klAgn2x+0SDK+ZsF6hT1JhPjtSV7srQDbrtijVKp4Kik8GbqRkLyJmf\\n1g7vdi/f8S6U142Ge7YJAL0Y+xb6Gl0GZs5QGhdRioHq1qOvFtdcitgK0JDz+ZlO\\nipHe66JI84cGWAdB0TkzuwYKM7Bt1YluhnyRP3iVGj91An6eBK9uTE9BzlPXeD3s\\nZ8MR3qInvxGZnJsnbUJIYh+sDse0bw==\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n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\\nkkqOMnepX7XL8b93SQ==\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIF4zCCA8ugAwIBAgIUb+hkbaVtQEL4Cn75Hf92Ml0TY7EwDQYJKoZIhvcNAQEF\\nBQAweTELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxJTAj\\nBgNVBAsTHFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxKDAmBgNVBAMTH1F1\\nb1ZhZGlzIE5vIFJlbGlhbmNlIFJvb3QgQ0EgRzIwHhcNMTEwODA1MTgwOTI4WhcN\\nMjEwODA1MTgwOTI4WjB5MQswCQYDVQQGEwJCTTEZMBcGA1UEChMQUXVvVmFkaXMg\\nTGltaXRlZDElMCMGA1UECxMcUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEo\\nMCYGA1UEAxMfUXVvVmFkaXMgTm8gUmVsaWFuY2UgUm9vdCBDQSBHMjCCAiIwDQYJ\\nKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJdyE2e1rsufqr2+llJFg0Oo9EnTvTw/\\nScne0ZbBIOeBUIspNnGTQ/nTKL7/BaM52CM73bbiDoEOG2utz9pLfAJOSYYzXRQr\\necWdUA7/0ru+FRfGzXIQj07G5m/FYRWQOs2NO0mm65iUpxedn3QuX7MqvaLnZemY\\nSQXGiNjkqOqFCGFw2FtSFH9LV/B45MO2GW/MaydlUGqMFJzX97QqEFzqO80gwNBe\\n/0p1O6U5OvqY6BSFTIAXApYJYSl4etLSzmbH0JQgA4DglWtV4KPYNhn40ouPNhQa\\nsVGYPquwwqdiDFjE9fzKQQdo+aid6WBnsELiXSbHr1t4WcFgwOZN5CEs68j8L3e4\\nOuDozrr4nmwLkuXuUkUbez0Z7w12ISPbnKd+GlXkVP9SCwqOtqF/lQTaEuk2NWuv\\nvrb0AziFhopHXRlNnBARuhWREy3+kpRgp7uV5prUjHmvRijtJKwCthmg0slC7g+E\\n3paqIcFApvkYEYzK0RD4pa/HdiOe+x8qQyWq8fI0+RUshsm9zYgsBQexVcQJ62NI\\nztEFKhm0KxHTGph7Cy+pewfaNFsjRN1fudSwmPSNQbPfNsv3hVYl0mnDwYSfWJsd\\nl90XBbTUDudi13m6OiOa3CyqEJSNYTswH1F2sTPQunMa1yojw2RcKgrN8zS9MDw4\\n7y/OXbhQiHOTAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\\nAgEGMB8GA1UdIwQYMBaAFK/Q7x34Cfk0ER/UV1b54DumYcQ3MB0GA1UdDgQWBBSv\\n0O8d+An5NBEf1FdW+eA7pmHENzANBgkqhkiG9w0BAQUFAAOCAgEAXpTQpmOYqgWx\\njbSnwOdTd3MMcfzvZBH4zmNRY9t4gORfy7Fz9EvIjqHRe+mLM4pmdG1mwcURkat/\\nknpUp+ONt6u9iifGvQ8027MMCSQ0KHmS6PfFWAW8EDxZPInTxhWYCBnnJdIG7wdb\\nX9AQpF7RRTy1vXTzMSXfo/+E+1zOLKcfUK1vMR5eB87rrkXe0bEJZQud36W379hy\\n71j5TWlLgaSNootVsggapnj8M5WV5QW3iyF9V9/Qg2Fr0JZ1dUMJu8WDiOTKb3i5\\nst5EcRLUmSVwcG9eHJhM69jTNxVgA1HtgMdYyGHPuaLwNBnBpJ1n1TXyzZ7lxavj\\nOwjRrFKmiqs7tbw07nuVJRI/hioMI5Vsqca8NLu8SC6p2klvQEr8dn/gWvt7gTAo\\n0E4I/El/F9SMKkWQlG6pjgDZPh63ZyHuQhGA1D2+tZYHtkFn+3CpQGoPCONZyf5J\\nSsTEzANelS3kAS4oApRBU38YFj0xzjQdmzWuh0dIdZubRuC/0rHQDbHtsiuQRk8V\\nHJICVj3EjWAbZkW3eMV8kDaLn3x8rPe92KgmI9XT9/C2ZZfnWX/fUah8nAwD5WdW\\nbI9Lie7+KxsVovqg3Zpmiu16OVGJp6yWSX3vsuBO+06R+i73ZxFpooNSF9dkiJPn\\n8GSeh2lu6LhTwLl5yHBJ7Vcxu9cALW8=\\n-----END CERTIFICATE-----\\n\" } . Handling Error Response . See Appendixes to get more information on the error codes. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#6-capturing-the-user-identification-status-info",
    "relUrl": "/QES-OASIS/#6-capturing-the-user-identification-status-info"
  },"94": {
    "doc": "OASIS Qualified Signature",
    "title": "7. Requesting a new Sign session",
    "content": "This section relates to the step 9 of the sequence diagram. In order to intiate the Sign session, you will forge a POST request towards this endpoint: BASE_URL/qes-partners/1.0.0/sign_document. Please note we are using SSLMA as authentication method, combined with IP filtering, as specified in SSLMA Authentication. Please note the same endpoint is used for starting the sign session and for requesting the status of this session (also see ‘requesting the session status’). Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | inDocs object REQUIRED | This contains the element(s) to be signed. 1 package can contain at most 70 hashes to sign. | . | docHash array REQUIRED | This parameter MUST contain information related to the document(s) to be signed by itsme®, expressed as an array. | . | id string REQUIRED | This is the ID of the hash(es) to be signed. | . | di array of objects REQUIRED | This parameter MUST contain the hash(es) to be signed and their algorithm(s), expressed as an array. | . | alg string REQUIRED | This MUST be \"http://www.w3.org/2001/04/xmlenc#sha256\", as only the SHA256 algorithm is supported. See http://www.w3.org/2001/04/xmlenc#sha256 for more information. | . | value string REQUIRED | This is the hash to be signed during the signature flow. The value of the computed hash must be Base64 encoded. | . | reqID string REQUIRED | This is an ID you generate to identify the current request. | . | asyncRespID string OPTIONAL | This parameter MUST be set to 'null' in order to initiate the sign session. | . | optInp object REQUIRED | Those are additional information needed for the signature request. | . | lang string OPTIONAL | This parameters defines the recommended language to be used for GUI interaction. If not defined, then the language comes from a dedicated cookie. If no cookie, defaults to the browser language. | . | itsme object REQUIRED | This parameter contains all the information related to itsme® context. | . | signer object REQUIRED | This is all the information that allows identification of the User in itsme®. | . | userCode string REQUIRED | The identifier for the User as returned in step 6 | . | partnerCode string REQUIRED | This MUST be the client identifier you received when registering your application during the onboarding process. This parameter will be translated to a label describing the 3rd party for which the User is signing the document. | . | serviceCode string REQUIRED | It MUST contain the value of the serviceCode defined for your application during the onboarding process. | . | description array of objects OPTIONAL | Is a text you provide as the description of the (package of) document(s). The maximum length is 50 characters. It will be displayed in the itsme App. If providing a description, you MUST provide a value for each language supported by itsme ('en', 'fr', 'nl' and 'de'). Please see Supported character set for encoding concerns. | . | lang string REQUIRED | The language of this description. MUST be one of 'en', 'fr', 'nl' or 'de'. | . | value string REQUIRED | The description of the (package of) document(s) in the above defined language. | . | redirectUrl string REQUIRED | This is the URL to which the User will be redirected (your remote SCA). This MUST exactly match the redirect URL of the specified service defined when registering your application during the onboarding process. | . | signPolicy object OPTIONAL | This is the object of the Signature policy to be used during the Signature. This parameter contains all the information related to the signature policy. | . | signPolicyRef string REQUIRED | Defines the reference of the signature policy to be used during itsme® Signing flow. In case no specific signature policy is applicable for that specific use case, the itsme® generic qualified signature policy SHOULD be used. The signature policy has to be indicated in the SCA Front-End to the User. The list of available codes can be retrieved from the JSON document.The signature policies used SHOULD be defined during the onboarding process. It is up to you to choose your signature policies within the list given by itsme®. If you want to add new signature policies to your list, please ask the itsme® Onboarding team. | . | commitmentTypeRef string OPTIONAL | Defines the reference of the commitment type to be used during itsme® Signing flow. This parameter is used to display (in the itsme® App) the commitment type of the signature to the User. There is no commitment type by default. If the parameter is not given by the SCA, then nothing is displayed in the itsme® App. You SHOULD use a code that corresponds to a specific commitment type. The list of available codes can be retrieved from the JSON document.The commitment types used SHOULD be defined during the onboarding process. It is up to you to choose your commitment types within the list given by itsme®. If you want to add new commitment types to your list, please ask the itsme® Onboarding team. | . | signerRole array of objects OPTIONAL | Defines the role of the signer. This information is displayed in the itsme® App to show to the signer under which role he will sign the document. If no signer role is provided nothing will be displayed in the itsme® App. This parameter is optional and freely defined in a free text of maximum 50 characters by yourself. You SHOULD provide this free text in all supported languages ('en', 'fr', 'nl' and 'de'). The characters used to define the Signer Role MUST be ISO-8859-1 compatible. | . | lang string REQUIRED | The language of this role description. MUST be one of 'en', 'fr', 'nl' or 'de'. | . | value string REQUIRED | The role description of the signer in the above defined language. | . Example: . POST /BASE_URL/qes-partners/1.0.0/sign_document HTTP/1.1 { \"inDocs\": { \"docHash\":[ { \"di\":[ { \"alg\":\"http://www.w3.org/2001/04/xmlenc#sha256\", \"value\":\"f4OxZX/x/FO5LcGBSKHWXfwtSx+j1ncoSt3SABJtkGk=\" } ], \"id\":\"ContractCar20180914u89236456.pdf\" }, { \"di\":[ { \"alg\":\"http://www.w3.org/2001/04/xmlenc#sha256\", \"value\":\"t9I89IEOCiue980A23A+ep/iAJM50+87BxgG65gVwtF=\" } ], \"id\":\"ContractHome20180915G74.pdf\" } ] }, \"reqID\": \"ReqID4va0acsef3mv5ft1dp71\", \"asyncRespID\": null, \"optInp\": { \"lang\": \"FR\", \"itsme\": { \"signer\": { \"userCode\": \"9o8f04wm1g0bdc8gmgcuxp2ehgn7txh0x2kq\" }, \"partnerCode\": \"myPartnerCode\", \"serviceCode\": \"myServiceCode\", \"description\": [ { \"lang\": \"EN\", \"value\": \"Car insurance contract\" }, { \"lang\": \"FR\", \"value\": \"Contrat d'assurance voiture\" }, { \"lang\": \"NL\", \"value\": \"Contract verzekering auto\" }, { \"lang\": \"DE\", \"value\": \"Kfz-Versicherungsvertrag\" } ], \"redirectUrl\": \"myServiceRedirectUrl\", \"signPolicy\": { \"signPolicyRef\": \"ITSME_DEFAULT\", \"commitmentTypeRef\":\"1.2.840.113549.1.9.16.6.5\", \"signerRole\": [ { \"lang\": \"EN\", \"value\": \"General Manager\" }, { \"lang\": \"FR\", \"value\": \"Gestionnaire\" }, { \"lang\": \"NL\", \"value\": \"Zaakvoerder\" }, { \"lang\": \"DE\", \"value\": \"Manager\" } ] } } } } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#7-requesting-a-new-sign-session",
    "relUrl": "/QES-OASIS/#7-requesting-a-new-sign-session"
  },"95": {
    "doc": "OASIS Qualified Signature",
    "title": "8. Capturing the Sign Response",
    "content": "Getting a successful Sign Response . This section relates to the step 10 of the sequence diagram. If the Sign Request has been sucessfully validated we will return an HTTP 200 response. The response body will include the following values: . | result object ALWAYS | This is the status of the request (pending, success or error). | . | maj string ALWAYS | This is a general message that will give the status of the request, pending, success or error. In case of failure, the root cause is given. This parameter can take one of the 4 values below: \"urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending\" \"urn:oasis:names:tc:dss:1.0:resultmajor:Success\" \"urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError\" \"urn:oasis:names:tc:dss:1.0:resultmajor:ResponderError\" | . | msg string Optional | This indicates the origin of the error. | . | reqID string ALWAYS | This is the ID of the request that you transfer. | . | respID string ALWAYS | This parameter is the identifier of a User identification session. This parameter is needed for you to get the status of the signature. | . | optOutp object ALWAYS | Contains additional information needed for the signature request. Please note this parameter is not returned in the other use of this call (see section Requesting the Sign session status). | . | itsme object ALWAYS | Contains all the information related to itsme® context. Please note this parameter is not returned in the other use of this call (see section Requesting the Sign session status). | . | signingUrl string ALWAYS | This signing URL is the link to redirect the User from the SCA frontend to the itsme® Signing Page. Please note this parameter is not returned in the other use of this call (see section Requesting the Sign session status). | . | userCode string ALWAYS | An identifier for the User, unique among all itsme® accounts and never reused. Use \"userCode\" in the application as the unique-identifier key for the User. Please note this parameter is not returned in the other use of this call (see section Requesting the Sign session status). | . Example: . { \"result\": { \"maj\": \"urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending\" }, \"reqID\": \"ReqID4va0acsef3mv5ft1dp71\", \"respID\": \"hjg3ngu3tvvv71k9qg1vyokc2mwmqgqk43iv\", \"optOutp\": { \"itsme\": { \"signingUrl\": \"https://uatmerchant.itsme.be/qes/prove_its_you_poka?q=34u5jh2dltb1xhsu0g4bshnlziycdhow&amp;language=FR\", \"userCode\" : endUserUserCode } } } . Handling Error Response . See Appendixes to get more information on the error codes. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#8-capturing-the-sign-response",
    "relUrl": "/QES-OASIS/#8-capturing-the-sign-response"
  },"96": {
    "doc": "OASIS Qualified Signature",
    "title": "9. Redirecting the end user",
    "content": "This section relates to the steps 11 and 12 of the sequence diagram. The next step is to redirect the end user to our Front-End, so that we can process the identification session. You must do that by forging a GET request towards the url specified at previous step, in the parameter signingUrl. Please note we can only whitelist one URL per serviceCode. As a result, the signingUrl will in practice be the same as the identificationUrl. Please note there is no built-in parameter designed to let you getting your session context back after the redirection to your FE (a parameter similar to the ‘state’ parameter in OpenID). However, you MAY add any query parameter to the URL specified in signingUrl and it will be preserved during the redirection, effectively allowing you to craft a custom parameter for finding back your session context. Also, please note that the duration of the identification process may strongly vary from a few seconds to a few minutes, depending on whether or not we need to create a certificate for this end user. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#9-redirecting-the-end-user",
    "relUrl": "/QES-OASIS/#9-redirecting-the-end-user"
  },"97": {
    "doc": "OASIS Qualified Signature",
    "title": "10. Requesting the Sign session status",
    "content": "This section relates to the step 13 of the sequence diagram. This request has to be sent in order to get the information about the Sign session (which you can do as many times as desired for the same signing session, as long as this session is still pending). In order to do so, you will forge a POST request towards BASE_URL/qes-partners/1.0.0/sign_document. Please note we are using SSLMA as authentication method, combined with IP filtering, as specified in SSLMA Authentication. Please note the same endpoint is used for starting the sign session and for requesting the status of this session (also see ‘Starting sign session’). Below you will find the mandatory and optional parameters to integrate in the HTTPS POST request body formatted as application/json: . | inDocs string Required | MUST be 'null'. | . | reqID string Required | This is the ID of the request that you are sending to us. | . | asyncRespID string Required | This parameter is the identifier of a User identification session. You MUST provide here the value of the parameter respId returned in step 8. In case no \"asyncRespID\" is given in the request, a new session is created (corresponding to step 7). Please note you will receive a 409 error if you fill in this parameter with the asyncRespID returned at step 5 instead | . | optInp object Required | Contains additional information needed for the signature request. | . | itsme object Required | Contains all the information related to itsme® context. | . | partnerCode string Required | MUST be the client identifier you received when registering your application during the onboarding process. Will be translated to a label describing the partner for which the User is signing the document. | . | serviceCode string Required | MUST contain the value of the serviceCode defined for your application during the onboarding process. | . Example: . POST /BASE_URL/qes-partners/1.0.0/sign_document HTTP/1.1 { \"inDocs\": null, \"reqID\": \"ReqIDv1prg8pmn9mtive3otsc\", \"asyncRespID\": \"b99a7d03acb94ea5a4d972aa31bb1c36\", \"optInp\": { \"itsme\": { \"partnerCode\":\"myPartnerCode\", \"serviceCode\":\"myServiceCode\" } } } . ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#10-requesting-the-sign-session-status",
    "relUrl": "/QES-OASIS/#10-requesting-the-sign-session-status"
  },"98": {
    "doc": "OASIS Qualified Signature",
    "title": "11. Capturing the Sign Status Response",
    "content": "This section relates to the step 14 of the sequence diagram. Getting a successful Sign Status Response . | result object ALWAYS | Status of the request (pending, success or error). | . | maj string ALWAYS | General message giving the status of the request, pending, success or error. In case of failure, the root cause is given. | . | min string Optional | Specific message that, in case of failure, identifies the root cause of the failure. | . | msg string Optional | Indicates the origin of the error. | . | reqID string ALWAYS | This is the ID of the request that you are sending to us. | . | respID string ALWAYS | Same value as returned in step 8 in the parameter respID. | . | sigObj array of objects ALWAYS | Contains the signed hashes within a JSON array. Please note this parameter is not returned in the other use of this call (see section Requesting a new Sign session). | . | b64Sig object ALWAYS | Contains the signed hash within a JSON object. Please note this parameter is not returned in the other use of this call (see section Requesting a new Sign session). | . | value string ALWAYS | This is the base64 encoded hash. The Sign algorithm is SHA256, the Public Key Cryptographic Standard is PKCS1 and the Signature format is « raw ». Please note this parameter is not returned in the other use of this call (see section Requesting a new Sign session). | . | whichdoc string ALWAYS | This is the ID of the hash(es) to be signed, as provided in the first use of this call: Requesting a new Sign session. Please note this parameter is not returned in the response to the first use of this call (see section Capturing the sign response). | . Example: . HTTP200 { \"result\": { \"maj\": \"urn:oasis:names:tc:dss:1.0:resultmajor:Success\" }, \"reqID\": \"ReqID4va0acsef3mv5ft1dp71\", \"respID\": \"gl1bb6g0bykali5yl46civwh615qtn5ek28m\", \"sigObj\": [ { \"b64Sig\": { \"value\": \"pekb3BX5tyWPn07qq/DIZI3W3qjyXrq2sZcIKpMAV0lGhcP0AzSXVkadlPwcmkOHJBFuCm0C1U6Bc8VrNCZnP6E260DShiasEAoV7ZmFhB4k7om/nXEsBTLPUJTWV9FUk1XyfuAnnbNvvmX7lAvmDyVPELO840ODUX7q8a43NES0ZFpPzbNd7HhqCRHf8UKKLFop7FwTPngc7LarTP6j0iX8PSNaoc/F2pi0Z62qN67UPy/zHmc1/5w718qygy6BSPLXS2csm+OcscN8Bg1JnJOgRLpxFelPpGxYSj/uOojfSXkF/0Kj9n2xlNLZnM+EPIwZCoTjA/4dBPvw5vdD0g==\" }, \"whichDoc\": \"myDoc\" } ] } . Handling Error Response . See Appendixes to get more information on the error codes. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#11-capturing-the-sign-status-response",
    "relUrl": "/QES-OASIS/#11-capturing-the-sign-status-response"
  },"99": {
    "doc": "OASIS Qualified Signature",
    "title": "Appendixes",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#appendixes",
    "relUrl": "/QES-OASIS/#appendixes"
  },"100": {
    "doc": "OASIS Qualified Signature",
    "title": "Handling Error Response",
    "content": "If one of the above request is invalid or unauthorized an error code will be returned to the User using the appropriate HTTPS status code, as listed in the table below: . | HTTP status code | Description | . | 400 | Returned in case of invalid Request Object. | . | 409 | Returned in case the User identification flow has been interrupted. | . | 500 | Internal Server Error. | . The Error Response will contain the “status” and the statusReason value. The following table describes the various error types that can be returned in the statusReason value of the error response: . | HTTP code | statusReason | Description | . | 400 | NOT_ALLOWED_TO_SIGN | The user account is not eligible for itsme hash signing. There are a few reasons to this, the most frequent one is that the user account is blocked. In any case, the user has to take action that cannot be initiated at your side and might need to contact the support. | . | 400 | NO_REQUEST | user_identification is a POST service. A body SHOULD be inserted into the request. For more information on the structure of this request, you can go to the section related to /user_identification. | . | 400 | MISSING_PARTNER_CODE | The request body does not contain the field \"partnerCode\". This field corresponds to the \"Partner Code/Client ID\" referenced in your onboarding file. | . | 400 | MISSING_SERVICE_CODE | The request body does not contain the field \"serviceCode\". This field corresponds to the \"Service Code\" referenced in your onboarding file. | . | 400 | INVALID_URL | The field \"redirectUrl\" is null or its syntax is not correct, URL is invalid. This field corresponds to the \"Redirect URL\" referenced in your onboarding file. | . | 400 | INVALID_REQUESTOR | The \"partnerCode\" and/or \"serviceCode\" referenced into the body do not reference an existing partner and/or service. The \"partnerCode\" corresponds to the \"Partner Code/Client ID\" referenced in your onboarding file. The \"serviceCode\" corresponds to the \"Service Code\" referenced in your onboarding file for a SIGN service. | . | 400 | UNAUTHORIZED_URL | The partner and its service have been correctly found by itsme® following referenced \"partnerCode\" and \"serviceCode\", but the given \"redirectUrl\" is not authorized for the partner and/or service mentioned. You did not provide a valid redirectUrl. The \"redirectUrl\" used here must correspond to the \"Redirect URL\" referenced in your onboarding file. | . | 400 | INVALID_LANG | The \"lang\" field does not reference a language supported by itsme®. You can consult \"BMID Well-Known Configuration\" to check which are the languages supported by itsme®, /well-known/configuration. | . | 400 | UNEXPECTED_ERROR | An error occurred during the validation of partner information. You SHOULD try again later. If the error persists, then you SHOULD contact itsme® support team for investigation. | . | 400 | UNKNOWN | An unknown error occurred during the request. You SHOULD contact itsme® support team for investigation. | . | 409 | PENDING | The User Identification Session you created is pending. The User is currently following the User Identification flow at itsme® side (web and mobile). | . | 409 | REJECTED | The User had to create a certificate in order to make a signature. However, he rejected his CREATE_CERT action in the itsme® App. A new User Identification session must be initialized. During that session, User has to confirm the CREATE_CERT action. | . | 409 | EXPIRED | The User had to create a certificate in order to make a signature. However, he waited too long (more than 3 minutes) before confirming his CREATE_CERT action in the itsme® App and his action expired. A new User Identification Session must be initialized. During that session, User has to confirm the CREATE_CERT action in time. | . | 409 | UNEXPECTED_ERROR | An unexpected error occurred during User’s Identification flow. You SHOULD try again later. If the error persists, then you SHOULD contact itsme® support team for investigation. | . | 409 | No payload | This error can be thrown in different cases. One frequent case is when the sign_document request is called with an asyncRespID that is not found. Please consult section 10 for this specific case. | . ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#handling-error-response-4",
    "relUrl": "/QES-OASIS/#handling-error-response-4"
  },"101": {
    "doc": "OASIS Qualified Signature",
    "title": "SSLMA Authentication",
    "content": "We make use of SSLMA Authentication with our b2b interface (BASE_URL/qes-partners/1.0.0). This means that the SSL certificate you present upon each call towards this interface must be the one whitelisted in our systems as part of the onboarding process. We combine this authentication with IP filtering, meaning that we need to whitelist the IP address of your server. This is also part of the onboarding process. When renewing your certificate (at expiration or for any other reason), please give us some advance notice to make sure the transition happens smoothly. If possible, the new certificate should: . | Be issued by the same CA as the previous certificate | Contain the same Common Name as the previous certificate | . Those 2 conditions will allow for a streamlined process where you can replace your certificate in a transparent way from the itsme® point of view. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#sslma-authentication",
    "relUrl": "/QES-OASIS/#sslma-authentication"
  },"102": {
    "doc": "OASIS Qualified Signature",
    "title": "Supported character set",
    "content": "The character set we support for free text fields is ISO 8859-15. You can buy the specification on ISO website or find a free version on Wikipedia. You might be interested in knowing that, although most usual characters are supported, some softwares-generated characters like curly apostrophes and long dashes are not part of ISO 8859-15. If you provide a non-supported character in a free text field the signing flow will be stopped and you will receive an error message back. ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/#supported-character-set",
    "relUrl": "/QES-OASIS/#supported-character-set"
  },"103": {
    "doc": "OASIS Qualified Signature",
    "title": "OASIS Qualified Signature",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/QES-OASIS/",
    "relUrl": "/QES-OASIS/"
  },"104": {
    "doc": "App to App test links",
    "title": "Requested data",
    "content": "The login links request all data available. The confirm links request a basic set of data (profile, eid, address, email and phone number). Please note also the Confirm links are only valid for a limited amount of time. Under some occasions, the JWKSet of the test partner is re-generated, making the request object in the links below obsolete. To re-create new ones, please consult How to create A2A confirm links (hosted on BMID Confluence). ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#requested-data",
    "relUrl": "/TestLinks/#requested-data"
  },"105": {
    "doc": "App to App test links",
    "title": "Links",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#links",
    "relUrl": "/TestLinks/#links"
  },"106": {
    "doc": "App to App test links",
    "title": "UAT",
    "content": "Login . UAT - OIDC V1 login . UAT - OIDC V2 login . Share Data . UAT - OIDC V2 share data . Confirm links . UAT - OIDC V1 confirm . UAT - OIDC V2 confirm . Azure B2C ClientSecret . UAT - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#uat",
    "relUrl": "/TestLinks/#uat"
  },"107": {
    "doc": "App to App test links",
    "title": "E2E",
    "content": "Login . E2E - OIDC V1 login . E2E - OIDC V2 login . Confirm . E2E - OIDC V1 confirm . E2E - OIDC V2 confirm . Azure B2C ClientSecret . E2E - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#e2e",
    "relUrl": "/TestLinks/#e2e"
  },"108": {
    "doc": "App to App test links",
    "title": "PRD",
    "content": "Login . PRD - OIDC V1 login . PRD - OIDC V2 login . PRD DRP - OIDC V2 login . Confirm . PRD - OIDC V1 Confirm . PRD - OIDC V2 Confirm . Azure B2C ClientSecret . PRD - Azure B2C . ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/#prd",
    "relUrl": "/TestLinks/#prd"
  },"109": {
    "doc": "App to App test links",
    "title": "App to App test links",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/TestLinks/",
    "relUrl": "/TestLinks/"
  },"110": {
    "doc": "JS Object Signing & Encryption",
    "title": "Introduction",
    "content": "The concepts of JWT, JWS, JWE and JWK are part of the JSON Object Signing and Encryption (JOSE) framework that intends to provide a method to securely transfer claims between parties. All these technologies can be used collectively to encrypt and/or sign content using a variety of algorithms. While the full set of permutations is extremely large, and might be daunting to some, it is expected that most applications will only use a small set of algorithms to meet their needs. ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#introduction",
    "relUrl": "/JOSE/#introduction"
  },"111": {
    "doc": "JS Object Signing & Encryption",
    "title": "Definitions",
    "content": "The JSON Object Signing and Encryption (JOSE) framework consists of several technologies: . | JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure, as the plaintext of a JSON Web Encryption (JWE) structure or enclosed in another JWE or JWS structure to create a Nested JWT, enabling nested signing and encryption to be performed. In fact a JWT does not exist itself — either it has to be a JWS and/or a JWE. It’s like an abstract class — the JWS and JWE are the concrete implementations. | JSON Web Signature (JWS) represents signed content using JSON data structures and base64url encoding as defined in the specifications. | JSON Web Encryption (JWE) specification standardizes the way to represent an encrypted content in a JSON-based data structure. | JSON Web Key (JWK) defines a consistent way to represent a cryptographic key in a JSON structure which is used to sign (JWS) and/or encrypt (JWE) a specific content. The JSON Web Key Set (JWKS) extension defines a consistent way to represent a set of cryptographic keys in a JSON structure. As itsme® only support the RSA cryptosystem, it requires that each party exposes its public keys as a simple JWK Set document on a URI accessible to all. | For itsme®, this URI can be retrieved from the itsme® Discovery document, using the \"jwks_uri\" key. | Your JWK Set document MUST be accessible via the URI communicated when setting up your project in the itsme® B2B portal. | . | . ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#definitions",
    "relUrl": "/JOSE/#definitions"
  },"112": {
    "doc": "JS Object Signing & Encryption",
    "title": "Creating your JWK Set URI",
    "content": "The JWK is nothing more than another representation of the (public) key of a certificate keypair and the JWK Set is simply a list of one or more JWK. So, you need to have/create your certificate key pairs (a key pair consists of a public key and a private key): you will need one pair for encryption and one pair for signing actions. You can use your certificates or (preferably) get them through a certificate authority. Next, you will need to ‘convert’ the PUBLIC keys (NOT the private key. You MUST keep the private key always private) to JWK and group them in a JWK Set. There are various tools that can be used and all major programming languages support have libraries available to do this for you. The resulting JWK Set MUST contain (at least) 2 JWK: one whereby the “use” parameter is ”enc” (for encryption) and another with “sig” (for signature). This JWK Set is nothing more than a plain text file (“JSON” format) and you should place that on a publicly available website (https off course) and share that link with us when registering your project in the itsme® B2B portal. As these are the PUBLIC keys, there is no problem to share this information publicly (in other words, it should not be placed behind a password or login screen). Some more (technical) documentation on https://tools.ietf.org/html/rfc7517. ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#creating-your-jwk-set-uri",
    "relUrl": "/JOSE/#creating-your-jwk-set-uri"
  },"113": {
    "doc": "JS Object Signing & Encryption",
    "title": "Signing, encrypting and decrypting",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#signing-encrypting-and-decrypting",
    "relUrl": "/JOSE/#signing-encrypting-and-decrypting"
  },"114": {
    "doc": "JS Object Signing & Encryption",
    "title": "1. Signing",
    "content": "A signed content can be serialized in two ways: the JWS compact serialization and the JWS JSON serialization. Because the OpenID Connect specification mandates to use JWS compact serialization whenever necessary, we will not explain the JWS JSON serialization signing process in this document. Following steps will show you how to generate a JWS Compact Serialization object: . | Build a JSON object including the below header elements, which express the cryptographic properties of the JWS object — this is known as the JWS Header. | alg Required | Identifies the cryptographic algorithm used to secure the JWS. This MUST be set to \"RS256\" | . | kid Optionnal | Hint indicating which key was used to secure the JWS. The structure of the kid value is a case-sensitive string. In case there are multiple signing keys referenced in your JWK Set document then a kid MUST be present. | . | The JWS Header will then be encoded using UTF-8 and base64url to produce the string below. | eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZXhhbXBsZSJ9 . | Construct the payload or the content to be signed as UTF-8 — this is known as the JWS Payload. | The JWS Payload will then be encoded using base64url to produce the string below. | SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0b . | Combine the JWS Header and JWS Payload, and separate them with period ('.') characters, to produce the JWS Signing Input. | Complete the signing operation over the JWS Signing Input with the algorithm defined in the \"alg\" parameter, to produce the JWS Signature. The JWS Signing Input is signed using your private key corresponding to the public key referenced in your JWK Set document. This information SHOULD be made available via the URI you communicated when setting up your project in the itsme® B2B portal. | The JWS Signature will then be encoded using base64url to produce the string below. | MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_fcIe8u9ipH84ogoree7vjbU5y18kDquDg . | Finally, you are now be able to build the JWS object by concatenating the three strings, and separate them with period ('.') characters. An example of a JWS object is given below. | eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZXhhbXBsZSJ9 . SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4 . MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_fcIe8u9ipH84ogoree7vjbU5y18kDquDg . ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#1-signing",
    "relUrl": "/JOSE/#1-signing"
  },"115": {
    "doc": "JS Object Signing & Encryption",
    "title": "2. Encryption",
    "content": "Now that our content is signed, we will encapsulate this JWS object into a JWE object so that it becomes encrypted as well. An encrypted content can be serialized in two ways: the JWE compact serialization and the JWE JSON serialization. Because the OpenID Connect specification mandates to use JWE compact serialization whenever necessary, we will not explain the JWE JSON serialization signing process in this document. With the JWE compact serialization, a JWE is the concatenation of 5 elements: . | The JWE Header contains information about the encryption algorithms used. | The encrypted Content Encryption Key (CEK) contains the key needed to decrypt the payload. | The Initialization Vector is used to introduce randomness in the encryption process. | The Cipher text is the encrypted payload itself. In this case, the payload is our JWS object. | The Authentication Tag is used for integrity checks. | . Here are the steps to generate those elements: . | Create the JWS object, as described in the section above. | Create the JWE Header: it is a JSON object containing 4 parameters. | ## JWE Header Example { \"alg\": \"RSA-OAEP\", \"enc\": \"A128CBC-HS256\", \"cty\": \"JWT\", \"kid\": \"samwise.gamgee@hobbiton.example\" } . | alg Required | Defines the algorithm used to encrypt the Content Encryption Key (CEK). This SHOULD be set to *\"RSA-OAEP-256\". | . | enc Required | Defines the algorithm used to perform authenticated encryption on the payload to produce the Ciphertext and the Authentication Tag. This MUST be set to one of the values advertised in the itsme® Discovery document. | . | cty Required | Defines the “content type” of the payload. In this case, the value MUST be *\"JWT\"*, to indicate that a nested JWT (= our JWS) is carried inside this JWT. | . | kid Optionnal | This parameter has the same meaning, syntax, and processing rules as the \"kid\" parameter defined in the JWS section, except that the key hint references the public key with which the JWE was encrypted; this can be used to determine the private key needed to decrypt the JWE. | . | Base64url encode the (UTF-8 encoded) JWE Header, to obtain a string like: | eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0 . | Generate a random 32 bytes string to be used as CEK | Encrypt the CEK using RSA-OAEP algorithm (RFC7518). The key to be used for this encryption is itsme® public key. This key is published in itsme® JWKset with parameter \"use\" set on \"enc\". Our JWKset can be found at the jwks_uri URL given in itsme® Discovery document | Base64url encode the (UTF-8 encoded) encrypted CEK, to obtain a string like: | laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJBuuzxg0V7yk1WClnQePFvG2K-pvSlWc9BRIazDrn50RcRai__3TDON395H3c62tIouJJ4XaRvYHFjZTZ2GXfz8YAImcc91Tfk0WXC2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcGTSLUeeCt36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8VlzNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOhMBs9M8XL223Fg47xlGsMXdfuY-4jaqVw . | Generate a random 128 bits string to be used as Initialization Vector. | Base64url encode the Initialization Vector to obtain a string like: | bbd5sTkYwhAIqfHsx8DayA . | Compute the ASCII values of the characters of the encoded JWE Header to get the Additional Authenticated Data (AAD). In our example, that would give: | 101 121 74 104 98 71 99 105 79 105 74 83 85 48 69 120 88 122 85 105 76 67 74 114 97 87 81 105 79 105 74 109 99 109 57 107 98 121 53 105 89 87 100 110 97 87 53 122 81 71 104 118 89 109 74 112 100 71 57 117 76 109 86 52 89 87 49 119 98 71 85 105 76 67 74 108 98 109 77 105 79 105 74 66 77 84 73 52 81 48 74 68 76 85 104 84 77 106 85 50 73 110 48 . | Encrypt the JWS using A128CBC-HS256 algorithm. The algorithm takes as input four strings: the CEK, the AAD, the JWE Initialization Vector and the payload (= the JWS) which were computed in the previous steps. The algorithm returns two string outputs: the JWE Ciphertext and the Authentication Tag. | Base64url-encode the JWE Ciphertext. | Base64url-encode the JWE Authentication Tag. | Assemble the final representation by concatenating the five base64url encoded strings, and separate them with period ('.') characters. An example of a JWE object is given below. | eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0 . laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJBuuzxg0V7yk1WClnQePFvG2K-pvSlWc9BRIazDrn50RcRai__3TDON395H3c62tIouJJ4XaRvYHFjZTZ2GXfz8YAImcc91Tfk0WXC2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcGTSLUeeCt36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8VlzNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOhMBs9M8XL223Fg47xlGsMXdfuY-4jaqVw . bbd5sTkYwhAIqfHsx8DayA . 0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62JhJvGZ4_FNVSiGc_raa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wnI3Jvo0mkpEEnlDmZvDu_k8OWzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc2VbVbK4dQKPdNTjPPEmRqcaGeTWZVyeSUvf5k59yJZxRuSvWFf6KrNtmRdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0zT5CbL5Qlw3sRc7u_hg0yKVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2O6_7uInMGhFeX4ctHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VWi7lzA6BP430m . kvKuFBXHe5mQr4lqgobAUg . ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#2-encryption",
    "relUrl": "/JOSE/#2-encryption"
  },"116": {
    "doc": "JS Object Signing & Encryption",
    "title": "3. Decrypting",
    "content": "To validate a Nested JWT object, you will first need to decrypt the JWE object, then extract the signed JWS Payload and verify the JWS Signature. Decrypting the JWE object . The decryption process is the reverse of the encryption process: . | Parse the JWE object to extract the serialized values of the base64url-encoded JWE Header, the base64url-encoded JWE Encrypted Key, the base64url-encoded JWE Initialization Vector, the base64url-encoded JWE Ciphertext, and the base64url-encoded JWE Authentication Tag. | Base64url decode the encoded representations of the JWE Header, the JWE Encrypted Key, the JWE Initialization Vector, the JWE Ciphertext, the JWE Authentication Tag, and the JWE Additional Authenticated Data (AAD). | Verify that the octet sequence resulting from decoding the encoded JWE Header is a UTF-8-encoded representation of a completely valid JSON object. | Determine the algorithm specified by the \"alg\" parameter in the JWE Header. | Decrypt the JWE Encrypted Key with the algorithm defined in the \"alg\" parameter, to produce the Content Encryption Key (CEK). The JWE Encrypted Key is decoded using your private key corresponding to the public key referenced in your JWK Set document. This information SHOULD be made available via the URI you communicated when setting up your project in the itsme® B2B portal. | Let the Additional Authenticated Data (AAD) encryption parameter be the octets of the ASCII representation of the encoded JWE Header value. | Decrypt the JWE Ciphertext with the encryption algorithm defined by the \"enc\" parameter in the JWE Header. It will return the decrypted JWS object. | . Extracting the payload . | Parse the JWS object to extract the JWS components serialized values, such as in the example below. | jws_header = \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZXhhbXBsZSJ9\" payload = \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\" signature = \"MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_fcIe8u9ipH84ogoree7vjbU5y18kDquDg\" . | Base64url-decode the encoded representation of the JWS Header. | Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object. | { \"alg\":\"RS256\", \"kid\":\"3466d51f7dd0c780565688c183921816c45889ad\" } . | Base64url-decode the encoded representation of the JWS Payload. | { \"sub\":\"joe\", \"aud\":\"im_oic_client\", \"jti\":\"uf90SK4wscFhctUT6Dtvb2\", \"iss\":\"https:\\/\\/localhost:9031\", \"iat\":1394060853, \"exp\":1394061153, \"nonce\":\"e957ffba-9a78-4ea9-8eca-ae8c4ef9c856\", \"at_hash\":\"wfgvmE9VxjAudsl9lc6TqA\" } . | Base64url-decode the encoded representation of the JWS Signature. | XiyNdHHHoYqarDZGkhln5sF_SQNNVvV67SZsFAk7yo8NreJjzVw7LmtkwpiUQe87-Km39PeIwf1W_PqEH9RqjA . You have decoded the JWS object. The next step is to validate the JWS Signature. Validating the JWS Signature . | Determine the signing algorithm alg and the key identifier kid from the JWS Header. | Validate the JWS Signature in the manner defined for the algorithm being used, which MUST be accurately represented by the value of the alg parameter. The signature is verified using the public key of itsme®, which can be retrieved from the itsme® Discovery document, using the jwks_uri key. If the returned itsme® JSON Web Key (JWK) contains an array of keys, you MUST use the one corresponding to the value given by the kid parameter from the JWS Header. | . ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/#3-decrypting",
    "relUrl": "/JOSE/#3-decrypting"
  },"117": {
    "doc": "JS Object Signing & Encryption",
    "title": "JS Object Signing & Encryption",
    "content": " ",
    "url": "https://belgianmobileid.github.io/doc/JOSE/",
    "relUrl": "/JOSE/"
  }
}
